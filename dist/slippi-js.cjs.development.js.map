{"version":3,"file":"slippi-js.cjs.development.js","sources":["../src/melee/animations.ts","../src/melee/types.ts","../src/melee/characters.ts","../src/melee/moves.ts","../src/melee/stages.ts","../src/stats/common.ts","../src/stats/actions.ts","../src/stats/combos.ts","../src/stats/conversions.ts","../src/types.ts","../src/stats/inputs.ts","../src/stats/overall.ts","../src/stats/stats.ts","../src/stats/stocks.ts","../src/console/communication.ts","../src/console/types.ts","../src/console/consoleConnection.ts","../src/console/dolphinConnection.ts","../src/utils/fullwidth.ts","../src/utils/slpReader.ts","../src/utils/slpStream.ts","../src/utils/slpFile.ts","../src/utils/slpFileWriter.ts","../src/utils/rollbackCounter.ts","../src/utils/slpParser.ts","../src/SlippiGame.ts"],"sourcesContent":["// eslint-disable-next-line\nexport function getDeathDirection(actionStateId: number) {\n  if (actionStateId > 0xa) {\n    return null;\n  }\n\n  switch (actionStateId) {\n    case 0:\n      return \"down\";\n    case 1:\n      return \"left\";\n    case 2:\n      return \"right\";\n    default:\n      return \"up\";\n  }\n}\n","export enum Character {\n  CAPTAIN_FALCON = 0,\n  DONKEY_KONG = 1,\n  FOX = 2,\n  GAME_AND_WATCH = 3,\n  KIRBY = 4,\n  BOWSER = 5,\n  LINK = 6,\n  LUIGI = 7,\n  MARIO = 8,\n  MARTH = 9,\n  MEWTWO = 10,\n  NESS = 11,\n  PEACH = 12,\n  PIKACHU = 13,\n  ICE_CLIMBERS = 14,\n  JIGGLYPUFF = 15,\n  SAMUS = 16,\n  YOSHI = 17,\n  ZELDA = 18,\n  SHEIK = 19,\n  FALCO = 20,\n  YOUNG_LINK = 21,\n  DR_MARIO = 22,\n  ROY = 23,\n  PICHU = 24,\n  GANONDORF = 25,\n  MASTER_HAND = 26,\n  WIREFRAME_MALE = 27,\n  WIREFRAME_FEMALE = 28,\n  GIGA_BOWSER = 29,\n  CRAZY_HAND = 30,\n  SANDBAG = 31,\n  POPO = 32,\n}\n\nexport enum Stage {\n  FOUNTAIN_OF_DREAMS = 2,\n  POKEMON_STADIUM = 3,\n  PEACHS_CASTLE = 4,\n  KONGO_JUNGLE = 5,\n  BRINSTAR = 6,\n  CORNERIA = 7,\n  YOSHIS_STORY = 8,\n  ONETT = 9,\n  MUTE_CITY = 10,\n  RAINBOW_CRUISE = 11,\n  JUNGLE_JAPES = 12,\n  GREAT_BAY = 13,\n  HYRULE_TEMPLE = 14,\n  BRINSTAR_DEPTHS = 15,\n  YOSHIS_ISLAND = 16,\n  GREEN_GREENS = 17,\n  FOURSIDE = 18,\n  MUSHROOM_KINGDOM = 19,\n  MUSHROOM_KINGDOM_2 = 20,\n  VENOM = 22,\n  POKE_FLOATS = 23,\n  BIG_BLUE = 24,\n  ICICLE_MOUNTAIN = 25,\n  ICETOP = 26,\n  FLAT_ZONE = 27,\n  DREAMLAND = 28,\n  YOSHIS_ISLAND_N64 = 29,\n  KONGO_JUNGLE_N64 = 30,\n  BATTLEFIELD = 31,\n  FINAL_DESTINATION = 32,\n  TARGET_TEST_MARIO = 33,\n  TARGET_TEST_CAPTAIN_FALCON = 34,\n  TARGET_TEST_YOUNG_LINK = 35,\n  TARGET_TEST_DONKEY_KONG = 36,\n  TARGET_TEST_DR_MARIO = 37,\n  TARGET_TEST_FALCO = 38,\n  TARGET_TEST_FOX = 39,\n  TARGET_TEST_ICE_CLIMBERS = 40,\n  TARGET_TEST_KIRBY = 41,\n  TARGET_TEST_BOWSER = 42,\n  TARGET_TEST_LINK = 43,\n  TARGET_TEST_LUIGI = 44,\n  TARGET_TEST_MARTH = 45,\n  TARGET_TEST_MEWTWO = 46,\n  TARGET_TEST_NESS = 47,\n  TARGET_TEST_PEACH = 48,\n  TARGET_TEST_PICHU = 49,\n  TARGET_TEST_PIKACHU = 50,\n  TARGET_TEST_JIGGLYPUFF = 51,\n  TARGET_TEST_SAMUS = 52,\n  TARGET_TEST_SHEIK = 53,\n  TARGET_TEST_YOSHI = 54,\n  TARGET_TEST_ZELDA = 55,\n  TARGET_TEST_GAME_AND_WATCH = 56,\n  TARGET_TEST_ROY = 57,\n  TARGET_TEST_GANONDORF = 58,\n  HOME_RUN_CONTEST = 84,\n}\n","import { Character } from \"./types\";\n\nexport type CharacterColor = string;\nconst DEFAULT_COLOR: CharacterColor = \"Default\";\n\nexport interface CharacterInfo {\n  id: number;\n  name: string;\n  shortName: string;\n  colors: CharacterColor[];\n}\n\nexport const UnknownCharacter: CharacterInfo = {\n  id: -1,\n  name: \"Unknown Character\",\n  shortName: \"Unknown\",\n  colors: [DEFAULT_COLOR],\n};\n\nconst externalCharacters: CharacterInfo[] = [\n  {\n    id: Character.CAPTAIN_FALCON,\n    name: \"Captain Falcon\",\n    shortName: \"Falcon\",\n    colors: [DEFAULT_COLOR, \"Black\", \"Red\", \"White\", \"Green\", \"Blue\"],\n  },\n  {\n    id: Character.DONKEY_KONG,\n    name: \"Donkey Kong\",\n    shortName: \"DK\",\n    colors: [DEFAULT_COLOR, \"Black\", \"Red\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.FOX,\n    name: \"Fox\",\n    shortName: \"Fox\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.GAME_AND_WATCH,\n    name: \"Mr. Game & Watch\",\n    shortName: \"G&W\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.KIRBY,\n    name: \"Kirby\",\n    shortName: \"Kirby\",\n    colors: [DEFAULT_COLOR, \"Yellow\", \"Blue\", \"Red\", \"Green\", \"White\"],\n  },\n  {\n    id: Character.BOWSER,\n    name: \"Bowser\",\n    shortName: \"Bowser\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Black\"],\n  },\n  {\n    id: Character.LINK,\n    name: \"Link\",\n    shortName: \"Link\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Black\", \"White\"],\n  },\n  {\n    id: Character.LUIGI,\n    name: \"Luigi\",\n    shortName: \"Luigi\",\n    colors: [DEFAULT_COLOR, \"White\", \"Blue\", \"Red\"],\n  },\n  {\n    id: Character.MARIO,\n    name: \"Mario\",\n    shortName: \"Mario\",\n    colors: [DEFAULT_COLOR, \"Yellow\", \"Black\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.MARTH,\n    name: \"Marth\",\n    shortName: \"Marth\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Green\", \"Black\", \"White\"],\n  },\n  {\n    id: Character.MEWTWO,\n    name: \"Mewtwo\",\n    shortName: \"Mewtwo\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.NESS,\n    name: \"Ness\",\n    shortName: \"Ness\",\n    colors: [DEFAULT_COLOR, \"Yellow\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.PEACH,\n    name: \"Peach\",\n    shortName: \"Peach\",\n    colors: [DEFAULT_COLOR, \"Daisy\", \"White\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.PIKACHU,\n    name: \"Pikachu\",\n    shortName: \"Pikachu\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Party Hat\", \"Cowboy Hat\"],\n  },\n  {\n    id: Character.ICE_CLIMBERS,\n    name: \"Ice Climbers\",\n    shortName: \"ICs\",\n    colors: [DEFAULT_COLOR, \"Green\", \"Orange\", \"Red\"],\n  },\n  {\n    id: Character.JIGGLYPUFF,\n    name: \"Jigglypuff\",\n    shortName: \"Puff\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Headband\", \"Crown\"],\n  },\n  {\n    id: Character.SAMUS,\n    name: \"Samus\",\n    shortName: \"Samus\",\n    colors: [DEFAULT_COLOR, \"Pink\", \"Black\", \"Green\", \"Purple\"],\n  },\n  {\n    id: Character.YOSHI,\n    name: \"Yoshi\",\n    shortName: \"Yoshi\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Yellow\", \"Pink\", \"Cyan\"],\n  },\n  {\n    id: Character.ZELDA,\n    name: \"Zelda\",\n    shortName: \"Zelda\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\", \"White\"],\n  },\n  {\n    id: Character.SHEIK,\n    name: \"Sheik\",\n    shortName: \"Sheik\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\", \"White\"],\n  },\n  {\n    id: Character.FALCO,\n    name: \"Falco\",\n    shortName: \"Falco\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.YOUNG_LINK,\n    name: \"Young Link\",\n    shortName: \"YLink\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"White\", \"Black\"],\n  },\n  {\n    id: Character.DR_MARIO,\n    name: \"Dr. Mario\",\n    shortName: \"Doc\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\", \"Black\"],\n  },\n  {\n    id: Character.ROY,\n    name: \"Roy\",\n    shortName: \"Roy\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\", \"Yellow\"],\n  },\n  {\n    id: Character.PICHU,\n    name: \"Pichu\",\n    shortName: \"Pichu\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\"],\n  },\n  {\n    id: Character.GANONDORF,\n    name: \"Ganondorf\",\n    shortName: \"Ganon\",\n    colors: [DEFAULT_COLOR, \"Red\", \"Blue\", \"Green\", \"Purple\"],\n  },\n];\n\nexport function getAllCharacters(): CharacterInfo[] {\n  return externalCharacters;\n}\n\nexport function getCharacterInfo(externalCharacterId: number): CharacterInfo {\n  const charInfo = externalCharacters[externalCharacterId];\n  if (charInfo) {\n    return charInfo;\n  }\n  return UnknownCharacter;\n}\n\nexport function getCharacterShortName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.shortName;\n}\n\nexport function getCharacterName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.name;\n}\n\n// Return a human-readable color from a characterCode.\nexport function getCharacterColorName(externalCharacterId: number, characterColor: number): CharacterColor {\n  const character = getCharacterInfo(externalCharacterId);\n  const color = character.colors[characterColor];\n  if (color) {\n    return color;\n  }\n  return DEFAULT_COLOR;\n}\n","export interface Move {\n  id: number;\n  name: string;\n  shortName: string;\n}\n\nexport const UnknownMove: Move = {\n  id: -1,\n  name: \"Unknown Move\",\n  shortName: \"unknown\",\n};\n\nconst moves: { [id: number]: Move } = {\n  1: {\n    // This includes all thrown items, zair, luigi's taunt, samus bombs, etc\n    id: 1,\n    name: \"Miscellaneous\",\n    shortName: \"misc\",\n  },\n  2: {\n    id: 2,\n    name: \"Jab\",\n    shortName: \"jab\",\n  },\n  3: {\n    id: 3,\n    name: \"Jab\",\n    shortName: \"jab\",\n  },\n  4: {\n    id: 4,\n    name: \"Jab\",\n    shortName: \"jab\",\n  },\n  5: {\n    id: 5,\n    name: \"Rapid Jabs\",\n    shortName: \"rapid-jabs\",\n  },\n  6: {\n    id: 6,\n    name: \"Dash Attack\",\n    shortName: \"dash\",\n  },\n  7: {\n    id: 7,\n    name: \"Forward Tilt\",\n    shortName: \"ftilt\",\n  },\n  8: {\n    id: 8,\n    name: \"Up Tilt\",\n    shortName: \"utilt\",\n  },\n  9: {\n    id: 9,\n    name: \"Down Tilt\",\n    shortName: \"dtilt\",\n  },\n  10: {\n    id: 10,\n    name: \"Forward Smash\",\n    shortName: \"fsmash\",\n  },\n  11: {\n    id: 11,\n    name: \"Up Smash\",\n    shortName: \"usmash\",\n  },\n  12: {\n    id: 12,\n    name: \"Down Smash\",\n    shortName: \"dsmash\",\n  },\n  13: {\n    id: 13,\n    name: \"Neutral Air\",\n    shortName: \"nair\",\n  },\n  14: {\n    id: 14,\n    name: \"Forward Air\",\n    shortName: \"fair\",\n  },\n  15: {\n    id: 15,\n    name: \"Back Air\",\n    shortName: \"bair\",\n  },\n  16: {\n    id: 16,\n    name: \"Up Air\",\n    shortName: \"uair\",\n  },\n  17: {\n    id: 17,\n    name: \"Down Air\",\n    shortName: \"dair\",\n  },\n  18: {\n    id: 18,\n    name: \"Neutral B\",\n    shortName: \"neutral-b\",\n  },\n  19: {\n    id: 19,\n    name: \"Side B\",\n    shortName: \"side-b\",\n  },\n  20: {\n    id: 20,\n    name: \"Up B\",\n    shortName: \"up-b\",\n  },\n  21: {\n    id: 21,\n    name: \"Down B\",\n    shortName: \"down-b\",\n  },\n  50: {\n    id: 50,\n    name: \"Getup Attack\",\n    shortName: \"getup\",\n  },\n  51: {\n    id: 51,\n    name: \"Getup Attack (Slow)\",\n    shortName: \"getup-slow\",\n  },\n  52: {\n    id: 52,\n    name: \"Grab Pummel\",\n    shortName: \"pummel\",\n  },\n  53: {\n    id: 53,\n    name: \"Forward Throw\",\n    shortName: \"fthrow\",\n  },\n  54: {\n    id: 54,\n    name: \"Back Throw\",\n    shortName: \"bthrow\",\n  },\n  55: {\n    id: 55,\n    name: \"Up Throw\",\n    shortName: \"uthrow\",\n  },\n  56: {\n    id: 56,\n    name: \"Down Throw\",\n    shortName: \"dthrow\",\n  },\n  61: {\n    id: 61,\n    name: \"Edge Attack (Slow)\",\n    shortName: \"edge-slow\",\n  },\n  62: {\n    id: 62,\n    name: \"Edge Attack\",\n    shortName: \"edge\",\n  },\n};\n\nexport function getMoveInfo(moveId: number): Move {\n  const m = moves[moveId];\n  if (!m) {\n    return UnknownMove;\n  }\n  return m;\n}\n\nexport function getMoveShortName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.shortName;\n}\n\nexport function getMoveName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.name;\n}\n","import { Stage } from \"./types\";\n\nexport interface StageInfo {\n  id: number;\n  name: string;\n}\n\nexport const UnknownStage: StageInfo = {\n  id: -1,\n  name: \"Unknown Stage\",\n};\n\nconst stages: { [id: number]: StageInfo } = {\n  [Stage.FOUNTAIN_OF_DREAMS]: {\n    id: Stage.FOUNTAIN_OF_DREAMS,\n    name: \"Fountain of Dreams\",\n  },\n  [Stage.POKEMON_STADIUM]: {\n    id: Stage.POKEMON_STADIUM,\n    name: \"Pokémon Stadium\",\n  },\n  [Stage.PEACHS_CASTLE]: {\n    id: Stage.PEACHS_CASTLE,\n    name: \"Princess Peach's Castle\",\n  },\n  [Stage.KONGO_JUNGLE]: {\n    id: Stage.KONGO_JUNGLE,\n    name: \"Kongo Jungle\",\n  },\n  [Stage.BRINSTAR]: {\n    id: Stage.BRINSTAR,\n    name: \"Brinstar\",\n  },\n  [Stage.CORNERIA]: {\n    id: Stage.CORNERIA,\n    name: \"Corneria\",\n  },\n  [Stage.YOSHIS_STORY]: {\n    id: Stage.YOSHIS_STORY,\n    name: \"Yoshi's Story\",\n  },\n  [Stage.ONETT]: {\n    id: Stage.ONETT,\n    name: \"Onett\",\n  },\n  [Stage.MUTE_CITY]: {\n    id: Stage.MUTE_CITY,\n    name: \"Mute City\",\n  },\n  [Stage.RAINBOW_CRUISE]: {\n    id: Stage.RAINBOW_CRUISE,\n    name: \"Rainbow Cruise\",\n  },\n  [Stage.JUNGLE_JAPES]: {\n    id: Stage.JUNGLE_JAPES,\n    name: \"Jungle Japes\",\n  },\n  [Stage.GREAT_BAY]: {\n    id: Stage.GREAT_BAY,\n    name: \"Great Bay\",\n  },\n  [Stage.HYRULE_TEMPLE]: {\n    id: Stage.HYRULE_TEMPLE,\n    name: \"Hyrule Temple\",\n  },\n  [Stage.BRINSTAR_DEPTHS]: {\n    id: Stage.BRINSTAR_DEPTHS,\n    name: \"Brinstar Depths\",\n  },\n  [Stage.YOSHIS_ISLAND]: {\n    id: Stage.YOSHIS_ISLAND,\n    name: \"Yoshi's Island\",\n  },\n  [Stage.GREEN_GREENS]: {\n    id: Stage.GREEN_GREENS,\n    name: \"Green Greens\",\n  },\n  [Stage.FOURSIDE]: {\n    id: Stage.FOURSIDE,\n    name: \"Fourside\",\n  },\n  [Stage.MUSHROOM_KINGDOM]: {\n    id: Stage.MUSHROOM_KINGDOM,\n    name: \"Mushroom Kingdom I\",\n  },\n  [Stage.MUSHROOM_KINGDOM_2]: {\n    id: Stage.MUSHROOM_KINGDOM_2,\n    name: \"Mushroom Kingdom II\",\n  },\n  [Stage.VENOM]: {\n    id: Stage.VENOM,\n    name: \"Venom\",\n  },\n  [Stage.POKE_FLOATS]: {\n    id: Stage.POKE_FLOATS,\n    name: \"Poké Floats\",\n  },\n  [Stage.BIG_BLUE]: {\n    id: Stage.BIG_BLUE,\n    name: \"Big Blue\",\n  },\n  [Stage.ICICLE_MOUNTAIN]: {\n    id: Stage.ICICLE_MOUNTAIN,\n    name: \"Icicle Mountain\",\n  },\n  [Stage.ICETOP]: {\n    id: Stage.ICETOP,\n    name: \"Icetop\",\n  },\n  [Stage.FLAT_ZONE]: {\n    id: Stage.FLAT_ZONE,\n    name: \"Flat Zone\",\n  },\n  [Stage.DREAMLAND]: {\n    id: Stage.DREAMLAND,\n    name: \"Dream Land N64\",\n  },\n  [Stage.YOSHIS_ISLAND_N64]: {\n    id: Stage.YOSHIS_ISLAND_N64,\n    name: \"Yoshi's Island N64\",\n  },\n  [Stage.KONGO_JUNGLE_N64]: {\n    id: Stage.KONGO_JUNGLE_N64,\n    name: \"Kongo Jungle N64\",\n  },\n  [Stage.BATTLEFIELD]: {\n    id: Stage.BATTLEFIELD,\n    name: \"Battlefield\",\n  },\n  [Stage.FINAL_DESTINATION]: {\n    id: Stage.FINAL_DESTINATION,\n    name: \"Final Destination\",\n  },\n  [Stage.TARGET_TEST_MARIO]: {\n    id: Stage.TARGET_TEST_MARIO,\n    name: \"Target Test (Mario)\",\n  },\n  [Stage.TARGET_TEST_CAPTAIN_FALCON]: {\n    id: Stage.TARGET_TEST_CAPTAIN_FALCON,\n    name: \"Target Test (Captain Falcon)\",\n  },\n  [Stage.TARGET_TEST_YOUNG_LINK]: {\n    id: Stage.TARGET_TEST_YOUNG_LINK,\n    name: \"Target Test (Young Link)\",\n  },\n  [Stage.TARGET_TEST_DONKEY_KONG]: {\n    id: Stage.TARGET_TEST_DONKEY_KONG,\n    name: \"Target Test (Donkey Kong)\",\n  },\n  [Stage.TARGET_TEST_DR_MARIO]: {\n    id: Stage.TARGET_TEST_DR_MARIO,\n    name: \"Target Test (Dr. Mario)\",\n  },\n  [Stage.TARGET_TEST_FALCO]: {\n    id: Stage.TARGET_TEST_FALCO,\n    name: \"Target Test (Falco)\",\n  },\n  [Stage.TARGET_TEST_FOX]: {\n    id: Stage.TARGET_TEST_FOX,\n    name: \"Target Test (Fox)\",\n  },\n  [Stage.TARGET_TEST_ICE_CLIMBERS]: {\n    id: Stage.TARGET_TEST_ICE_CLIMBERS,\n    name: \"Target Test (Ice Climbers)\",\n  },\n  [Stage.TARGET_TEST_KIRBY]: {\n    id: Stage.TARGET_TEST_KIRBY,\n    name: \"Target Test (Kirby)\",\n  },\n  [Stage.TARGET_TEST_BOWSER]: {\n    id: Stage.TARGET_TEST_BOWSER,\n    name: \"Target Test (Bowser)\",\n  },\n  [Stage.TARGET_TEST_LINK]: {\n    id: Stage.TARGET_TEST_LINK,\n    name: \"Target Test (Link)\",\n  },\n  [Stage.TARGET_TEST_LUIGI]: {\n    id: Stage.TARGET_TEST_LUIGI,\n    name: \"Target Test (Luigi)\",\n  },\n  [Stage.TARGET_TEST_MARTH]: {\n    id: Stage.TARGET_TEST_MARTH,\n    name: \"Target Test (Marth)\",\n  },\n  [Stage.TARGET_TEST_MEWTWO]: {\n    id: Stage.TARGET_TEST_MEWTWO,\n    name: \"Target Test (Mewtwo)\",\n  },\n  [Stage.TARGET_TEST_NESS]: {\n    id: Stage.TARGET_TEST_NESS,\n    name: \"Target Test (Ness)\",\n  },\n  [Stage.TARGET_TEST_PEACH]: {\n    id: Stage.TARGET_TEST_PEACH,\n    name: \"Target Test (Peach)\",\n  },\n  [Stage.TARGET_TEST_PICHU]: {\n    id: Stage.TARGET_TEST_PICHU,\n    name: \"Target Test (Pichu)\",\n  },\n  [Stage.TARGET_TEST_PIKACHU]: {\n    id: Stage.TARGET_TEST_PIKACHU,\n    name: \"Target Test (Pikachu)\",\n  },\n  [Stage.TARGET_TEST_JIGGLYPUFF]: {\n    id: Stage.TARGET_TEST_JIGGLYPUFF,\n    name: \"Target Test (Jigglypuff)\",\n  },\n  [Stage.TARGET_TEST_SAMUS]: {\n    id: Stage.TARGET_TEST_SAMUS,\n    name: \"Target Test (Samus)\",\n  },\n  [Stage.TARGET_TEST_SHEIK]: {\n    id: Stage.TARGET_TEST_SHEIK,\n    name: \"Target Test (Sheik)\",\n  },\n  [Stage.TARGET_TEST_YOSHI]: {\n    id: Stage.TARGET_TEST_YOSHI,\n    name: \"Target Test (Yoshi)\",\n  },\n  [Stage.TARGET_TEST_ZELDA]: {\n    id: Stage.TARGET_TEST_ZELDA,\n    name: \"Target Test (Zelda)\",\n  },\n  [Stage.TARGET_TEST_GAME_AND_WATCH]: {\n    id: Stage.TARGET_TEST_GAME_AND_WATCH,\n    name: \"Target Test (Mr. Game & Watch)\",\n  },\n  [Stage.TARGET_TEST_ROY]: {\n    id: Stage.TARGET_TEST_ROY,\n    name: \"Target Test (Roy)\",\n  },\n  [Stage.TARGET_TEST_GANONDORF]: {\n    id: Stage.TARGET_TEST_GANONDORF,\n    name: \"Target Test (Ganondorf)\",\n  },\n  [Stage.HOME_RUN_CONTEST]: {\n    id: Stage.HOME_RUN_CONTEST,\n    name: \"Home-Run Contest\",\n  },\n};\n\nexport function getStageInfo(stageId: number): StageInfo {\n  const s = stages[stageId];\n  if (!s) {\n    return UnknownStage;\n  }\n  return s;\n}\n\nexport function getStageName(stageId: number): string {\n  const stage = getStageInfo(stageId);\n  return stage.name;\n}\n","import type { GameStartType, PostFrameUpdateType } from \"../types\";\n\nexport interface StatsType {\n  gameComplete: boolean;\n  lastFrame: number;\n  playableFrameCount: number;\n  stocks: StockType[];\n  conversions: ConversionType[];\n  combos: ComboType[];\n  actionCounts: ActionCountsType[];\n  overall: OverallType[];\n}\n\nexport interface RatioType {\n  count: number;\n  total: number;\n  ratio: number | null;\n}\n\nexport interface PlayerIndexedType {\n  playerIndex: number;\n  opponentIndex: number;\n}\n\nexport interface DurationType {\n  startFrame: number;\n  endFrame?: number | null;\n}\n\nexport interface DamageType {\n  startPercent: number;\n  currentPercent: number;\n  endPercent?: number | null;\n}\n\nexport interface StockType extends DurationType, DamageType {\n  playerIndex: number;\n  count: number;\n  deathAnimation?: number | null;\n}\n\nexport interface MoveLandedType {\n  playerIndex: number;\n  frame: number;\n  moveId: number;\n  hitCount: number;\n  damage: number;\n}\n\nexport interface ComboType extends DurationType, DamageType {\n  playerIndex: number;\n  moves: MoveLandedType[];\n  didKill: boolean;\n  lastHitBy: number | null;\n}\n\nexport interface ConversionType extends ComboType {\n  openingType: string;\n}\n\nexport interface ActionCountsType {\n  playerIndex: number;\n  wavedashCount: number;\n  wavelandCount: number;\n  airDodgeCount: number;\n  dashDanceCount: number;\n  spotDodgeCount: number;\n  ledgegrabCount: number;\n  rollCount: number;\n  lCancelCount: {\n    success: number;\n    fail: number;\n  };\n  grabCount: {\n    success: number;\n    fail: number;\n  };\n  throwCount: {\n    up: number;\n    forward: number;\n    back: number;\n    down: number;\n  };\n  groundTechCount: {\n    // tech away/in are in reference to the opponents position and not the stage\n    away: number;\n    in: number;\n    neutral: number;\n    fail: number;\n  };\n  wallTechCount: {\n    success: number;\n    fail: number;\n  };\n}\n\nexport interface InputCountsType {\n  buttons: number;\n  triggers: number;\n  joystick: number;\n  cstick: number;\n  total: number;\n}\n\nexport interface OverallType {\n  playerIndex: number;\n  inputCounts: InputCountsType;\n  conversionCount: number;\n  totalDamage: number;\n  killCount: number;\n  successfulConversions: RatioType;\n  inputsPerMinute: RatioType;\n  digitalInputsPerMinute: RatioType;\n  openingsPerKill: RatioType;\n  damagePerOpening: RatioType;\n  neutralWinRatio: RatioType;\n  counterHitRatio: RatioType;\n  beneficialTradeRatio: RatioType;\n}\n\nexport enum State {\n  // Animation ID ranges\n  DAMAGE_START = 0x4b,\n  DAMAGE_END = 0x5b,\n  CAPTURE_START = 0xdf,\n  CAPTURE_END = 0xe8,\n  GUARD_START = 0xb2,\n  GUARD_END = 0xb6,\n  GROUNDED_CONTROL_START = 0xe,\n  GROUNDED_CONTROL_END = 0x18,\n  SQUAT_START = 0x27,\n  SQUAT_END = 0x29,\n  DOWN_START = 0xb7,\n  DOWN_END = 0xc6,\n  TECH_START = 0xc7,\n  TECH_END = 0xcc,\n  DYING_START = 0x0,\n  DYING_END = 0xa,\n  CONTROLLED_JUMP_START = 0x18,\n  CONTROLLED_JUMP_END = 0x22,\n  GROUND_ATTACK_START = 0x2c,\n  GROUND_ATTACK_END = 0x40,\n  AERIAL_ATTACK_START = 0x41,\n  AERIAL_ATTACK_END = 0x4a,\n\n  // Animation ID specific\n  ROLL_FORWARD = 0xe9,\n  ROLL_BACKWARD = 0xea,\n  SPOT_DODGE = 0xeb,\n  AIR_DODGE = 0xec,\n  ACTION_WAIT = 0xe,\n  ACTION_DASH = 0x14,\n  ACTION_KNEE_BEND = 0x18,\n  GUARD_ON = 0xb2,\n  TECH_MISS_UP = 0xb7,\n  TECH_MISS_DOWN = 0xbf,\n  NEUTRAL_TECH = 0xc7,\n  FORWARD_TECH = 0xc8,\n  BACKWARD_TECH = 0xc9,\n  WALL_TECH = 0xca,\n  MISSED_WALL_TECH = 0xf7,\n  DASH = 0x14,\n  TURN = 0x12,\n  LANDING_FALL_SPECIAL = 0x2b,\n  JUMP_FORWARD = 0x19,\n  JUMP_BACKWARD = 0x1a,\n  FALL_FORWARD = 0x1e,\n  FALL_BACKWARD = 0x1f,\n  GRAB = 0xd4,\n  GRAB_WAIT = 0xd8,\n  PUMMEL = 0xd9,\n  CLIFF_CATCH = 0xfc,\n  THROW_UP = 0xdd,\n  THROW_FORWARD = 0xdb,\n  THROW_DOWN = 0xde,\n  THROW_BACK = 0xdc,\n  DAMAGE_FALL = 0x26,\n\n  // Command Grabs\n  BARREL_WAIT = 0x125,\n  COMMAND_GRAB_RANGE1_START = 0x10a,\n  COMMAND_GRAB_RANGE1_END = 0x130,\n\n  COMMAND_GRAB_RANGE2_START = 0x147,\n  COMMAND_GRAB_RANGE2_END = 0x152,\n}\n\nexport const Timers = {\n  PUNISH_RESET_FRAMES: 45,\n  RECOVERY_RESET_FRAMES: 45,\n  COMBO_STRING_RESET_FRAMES: 45,\n};\n\nexport function getSinglesPlayerPermutationsFromSettings(settings: GameStartType): PlayerIndexedType[] {\n  if (!settings || settings.players.length !== 2) {\n    // Only return opponent indices for singles\n    return [];\n  }\n\n  return [\n    {\n      playerIndex: settings.players[0]!.playerIndex,\n      opponentIndex: settings.players[1]!.playerIndex,\n    },\n    {\n      playerIndex: settings.players[1]!.playerIndex,\n      opponentIndex: settings.players[0]!.playerIndex,\n    },\n  ];\n}\n\nexport function didLoseStock(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): boolean {\n  if (!frame || !prevFrame) {\n    return false;\n  }\n\n  return prevFrame.stocksRemaining! - frame.stocksRemaining! > 0;\n}\n\nexport function isInControl(state: number): boolean {\n  const ground = state >= State.GROUNDED_CONTROL_START && state <= State.GROUNDED_CONTROL_END;\n  const squat = state >= State.SQUAT_START && state <= State.SQUAT_END;\n  const groundAttack = state > State.GROUND_ATTACK_START && state <= State.GROUND_ATTACK_END;\n  const isGrab = state === State.GRAB;\n  // TODO: Add grounded b moves?\n  return ground || squat || groundAttack || isGrab;\n}\n\nexport function isTeching(state: number): boolean {\n  return state >= State.TECH_START && state <= State.TECH_END;\n}\n\nexport function isDown(state: number): boolean {\n  return state >= State.DOWN_START && state <= State.DOWN_END;\n}\n\nexport function isDamaged(state: number): boolean {\n  return (state >= State.DAMAGE_START && state <= State.DAMAGE_END) || state === State.DAMAGE_FALL;\n}\n\nexport function isGrabbed(state: number): boolean {\n  return state >= State.CAPTURE_START && state <= State.CAPTURE_END;\n}\n\n// TODO: Find better implementation of 3 seperate ranges\nexport function isCommandGrabbed(state: number): boolean {\n  return (\n    ((state >= State.COMMAND_GRAB_RANGE1_START && state <= State.COMMAND_GRAB_RANGE1_END) ||\n      (state >= State.COMMAND_GRAB_RANGE2_START && state <= State.COMMAND_GRAB_RANGE2_END)) &&\n    state !== State.BARREL_WAIT\n  );\n}\n\nexport function isDead(state: number): boolean {\n  return state >= State.DYING_START && state <= State.DYING_END;\n}\n\nexport function calcDamageTaken(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): number {\n  const percent = frame.percent ?? 0;\n  const prevPercent = prevFrame.percent ?? 0;\n\n  return percent - prevPercent;\n}\n","import { get, isEqual, keyBy, last, set, size } from \"lodash\";\n\nimport type { FrameEntryType, GameStartType } from \"../types\";\nimport type { ActionCountsType, PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings, State } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// Frame pattern that indicates a dash dance turn was executed\nconst dashDanceAnimations = [State.DASH, State.TURN, State.DASH];\n\ninterface PlayerActionState {\n  playerCounts: ActionCountsType;\n  animations: number[];\n}\n\nexport class ActionsComputer implements StatComputer<ActionCountsType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, PlayerActionState>();\n\n  public setup(settings: GameStartType): void {\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.playerPermutations.forEach((indices) => {\n      const playerCounts: ActionCountsType = {\n        playerIndex: indices.playerIndex,\n        wavedashCount: 0,\n        wavelandCount: 0,\n        airDodgeCount: 0,\n        dashDanceCount: 0,\n        spotDodgeCount: 0,\n        ledgegrabCount: 0,\n        rollCount: 0,\n        lCancelCount: {\n          success: 0,\n          fail: 0,\n        },\n        grabCount: {\n          success: 0,\n          fail: 0,\n        },\n        throwCount: {\n          up: 0,\n          forward: 0,\n          back: 0,\n          down: 0,\n        },\n        groundTechCount: {\n          // tech away/in are in reference to the opponents position and not the stage\n          away: 0,\n          in: 0,\n          neutral: 0,\n          fail: 0,\n        },\n        wallTechCount: {\n          success: 0,\n          fail: 0,\n        },\n      };\n      const playerState: PlayerActionState = {\n        playerCounts: playerCounts,\n        animations: [],\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleActionCompute(state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): ActionCountsType[] {\n    return Array.from(this.state.values()).map((val) => val.playerCounts);\n  }\n}\n\nfunction didMissGroundTech(animation: State): boolean {\n  return animation === State.TECH_MISS_DOWN || animation === State.TECH_MISS_UP;\n}\n\nfunction isRolling(animation: State): boolean {\n  return animation === State.ROLL_BACKWARD || animation === State.ROLL_FORWARD;\n}\n\nfunction didStartRoll(currentAnimation: number, previousAnimation: number): boolean {\n  const isCurrentlyRolling = isRolling(currentAnimation);\n  const wasPreviouslyRolling = isRolling(previousAnimation);\n\n  return isCurrentlyRolling && !wasPreviouslyRolling;\n}\n\nfunction isSpotDodging(animation: State): boolean {\n  return animation === State.SPOT_DODGE;\n}\n\nfunction didStartGrabSuccess(currentAnimation: State, previousAnimation: State): boolean {\n  return previousAnimation === State.GRAB && currentAnimation <= State.GRAB_WAIT && currentAnimation > State.GRAB;\n}\nfunction didStartGrabFail(currentAnimation: State, previousAnimation: State): boolean {\n  return previousAnimation === State.GRAB && (currentAnimation > State.GRAB_WAIT || currentAnimation < State.GRAB);\n}\n\nfunction didStartSpotDodge(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyDodging = isSpotDodging(currentAnimation);\n  const wasPreviouslyDodging = isSpotDodging(previousAnimation);\n\n  return isCurrentlyDodging && !wasPreviouslyDodging;\n}\n\nfunction isAirDodging(animation: State): boolean {\n  return animation === State.AIR_DODGE;\n}\n\nfunction didStartAirDodge(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyDodging = isAirDodging(currentAnimation);\n  const wasPreviouslyDodging = isAirDodging(previousAnimation);\n\n  return isCurrentlyDodging && !wasPreviouslyDodging;\n}\n\nfunction isGrabbingLedge(animation: State): boolean {\n  return animation === State.CLIFF_CATCH;\n}\n\nfunction isAerialAttack(animation: State): boolean {\n  return animation >= State.AERIAL_ATTACK_START && animation <= State.AERIAL_ATTACK_END;\n}\n\nfunction didStartLedgegrab(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyGrabbingLedge = isGrabbingLedge(currentAnimation);\n  const wasPreviouslyGrabbingLedge = isGrabbingLedge(previousAnimation);\n\n  return isCurrentlyGrabbingLedge && !wasPreviouslyGrabbingLedge;\n}\n\nfunction handleActionCompute(state: PlayerActionState, indices: PlayerIndexedType, frame: FrameEntryType): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n  const incrementCount = (field: string, condition: boolean): void => {\n    if (!condition) {\n      return;\n    }\n\n    const current: number = get(state.playerCounts, field, 0);\n    set(state.playerCounts, field, current + 1);\n  };\n\n  // Manage animation state\n  const currentAnimation = playerFrame.actionStateId!;\n  state.animations.push(currentAnimation);\n\n  // Grab last 3 frames\n  const last3Frames = state.animations.slice(-3);\n  const prevAnimation = last3Frames[last3Frames.length - 2] as number;\n  const newAnimation = currentAnimation !== prevAnimation;\n\n  // Increment counts based on conditions\n  const didDashDance = isEqual(last3Frames, dashDanceAnimations);\n  incrementCount(\"dashDanceCount\", didDashDance);\n\n  const didRoll = didStartRoll(currentAnimation, prevAnimation);\n  incrementCount(\"rollCount\", didRoll);\n\n  const didSpotDodge = didStartSpotDodge(currentAnimation, prevAnimation);\n  incrementCount(\"spotDodgeCount\", didSpotDodge);\n\n  const didAirDodge = didStartAirDodge(currentAnimation, prevAnimation);\n  incrementCount(\"airDodgeCount\", didAirDodge);\n\n  const didGrabLedge = didStartLedgegrab(currentAnimation, prevAnimation);\n  incrementCount(\"ledgegrabCount\", didGrabLedge);\n\n  const didGrabSucceed = didStartGrabSuccess(currentAnimation, prevAnimation);\n  incrementCount(\"grabCount.success\", didGrabSucceed);\n  const didGrabFail = didStartGrabFail(currentAnimation, prevAnimation);\n  incrementCount(\"grabCount.fail\", didGrabFail);\n\n  incrementCount(\"throwCount.up\", currentAnimation === State.THROW_UP && newAnimation);\n  incrementCount(\"throwCount.forward\", currentAnimation === State.THROW_FORWARD && newAnimation);\n  incrementCount(\"throwCount.down\", currentAnimation === State.THROW_DOWN && newAnimation);\n  incrementCount(\"throwCount.back\", currentAnimation === State.THROW_BACK && newAnimation);\n\n  if (newAnimation) {\n    const didMissTech = didMissGroundTech(currentAnimation);\n    incrementCount(\"groundTechCount.fail\", didMissTech);\n    let opponentDir = 1;\n    let facingOpponent = false;\n\n    if (playerFrame.positionX! > opponentFrame.positionX!) {\n      opponentDir = -1;\n    }\n    if (playerFrame.facingDirection == opponentDir) {\n      facingOpponent = true;\n    }\n\n    incrementCount(\"groundTechCount.in\", currentAnimation === State.FORWARD_TECH && facingOpponent);\n    incrementCount(\"groundTechCount.in\", currentAnimation === State.BACKWARD_TECH && !facingOpponent);\n    incrementCount(\"groundTechCount.neutral\", currentAnimation === State.NEUTRAL_TECH);\n    incrementCount(\"groundTechCount.away\", currentAnimation === State.BACKWARD_TECH && facingOpponent);\n    incrementCount(\"groundTechCount.away\", currentAnimation === State.FORWARD_TECH && !facingOpponent);\n\n    incrementCount(\"wallTechCount.success\", currentAnimation === State.WALL_TECH);\n    incrementCount(\"wallTechCount.fail\", currentAnimation === State.MISSED_WALL_TECH);\n  }\n\n  if (isAerialAttack(currentAnimation)) {\n    incrementCount(\"lCancelCount.success\", playerFrame.lCancelStatus === 1);\n    incrementCount(\"lCancelCount.fail\", playerFrame.lCancelStatus === 2);\n  }\n\n  // Handles wavedash detection (and waveland)\n  handleActionWavedash(state.playerCounts, state.animations);\n}\n\nfunction handleActionWavedash(counts: ActionCountsType, animations: State[]): void {\n  const currentAnimation = last(animations);\n  const prevAnimation = animations[animations.length - 2] as number;\n\n  const isSpecialLanding = currentAnimation === State.LANDING_FALL_SPECIAL;\n  const isAcceptablePrevious = isWavedashInitiationAnimation(prevAnimation);\n  const isPossibleWavedash = isSpecialLanding && isAcceptablePrevious;\n\n  if (!isPossibleWavedash) {\n    return;\n  }\n\n  // Here we special landed, it might be a wavedash, let's check\n  // We grab the last 8 frames here because that should be enough time to execute a\n  // wavedash. This number could be tweaked if we find false negatives\n  const recentFrames = animations.slice(-8);\n  const recentAnimations = keyBy(recentFrames, (animation) => animation);\n\n  if (size(recentAnimations) === 2 && recentAnimations[State.AIR_DODGE]) {\n    // If the only other animation is air dodge, this might be really late to the point\n    // where it was actually an air dodge. Air dodge animation is really long\n    return;\n  }\n\n  if (recentAnimations[State.AIR_DODGE]) {\n    // If one of the recent animations was an air dodge, let's remove that from the\n    // air dodge counter, we don't want to count air dodges used to wavedash/land\n    counts.airDodgeCount -= 1;\n  }\n\n  if (recentAnimations[State.ACTION_KNEE_BEND]) {\n    // If a jump was started recently, we will consider this a wavedash\n    counts.wavedashCount += 1;\n  } else {\n    // If there was no jump recently, this is a waveland\n    counts.wavelandCount += 1;\n  }\n}\n\nfunction isWavedashInitiationAnimation(animation: State): boolean {\n  if (animation === State.AIR_DODGE) {\n    return true;\n  }\n\n  const isAboveMin = animation >= State.CONTROLLED_JUMP_START;\n  const isBelowMax = animation <= State.CONTROLLED_JUMP_END;\n  return isAboveMin && isBelowMax;\n}\n","import { EventEmitter } from \"events\";\nimport { last } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ComboType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isDead,\n  isDown,\n  isGrabbed,\n  isTeching,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nexport enum ComboEvent {\n  COMBO_START = \"COMBO_START\",\n  COMBO_EXTEND = \"COMBO_EXTEND\",\n  COMBO_END = \"COMBO_END\",\n}\n\ninterface ComboState {\n  combo: ComboType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n  event: ComboEvent | null;\n}\n\nexport class ComboComputer extends EventEmitter implements StatComputer<ComboType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, ComboState>();\n  private combos = new Array<ComboType>();\n  private settings: GameStartType | null = null;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.settings = settings;\n    this.state = new Map();\n    this.combos = [];\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: ComboState = {\n        combo: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n        event: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleComboCompute(allFrames, state, indices, frame, this.combos);\n\n        // Emit an event for the new combo\n        if (state.event !== null) {\n          this.emit(state.event, {\n            combo: last(this.combos),\n            settings: this.settings,\n          });\n          state.event = null;\n        }\n      }\n    });\n  }\n\n  public fetch(): ComboType[] {\n    return this.combos;\n  }\n}\n\nfunction handleComboCompute(\n  frames: FramesType,\n  state: ComboState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  combos: ComboType[],\n): void {\n  const currentFrameNumber = frame.frame;\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a combo or count the moves for the existing combo\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    let comboStarted = false;\n    if (!state.combo) {\n      state.combo = {\n        playerIndex: indices.opponentIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        lastHitBy: indices.playerIndex,\n      };\n\n      combos.push(state.combo);\n\n      // Track whether this is a new combo or not\n      comboStarted = true;\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.combo.moves.push(state.move);\n\n        // Make sure we don't overwrite the START event\n        if (!comboStarted) {\n          state.event = ComboEvent.COMBO_EXTEND;\n        }\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n\n    if (comboStarted) {\n      state.event = ComboEvent.COMBO_START;\n    }\n  }\n\n  if (!state.combo) {\n    // The rest of the function handles combo termination logic, so if we don't\n    // have a combo started, there is no need to continue\n    return;\n  }\n\n  const opntIsTeching = isTeching(oppActionStateId);\n  const opntIsDowned = isDown(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n  const opntIsDying = isDead(oppActionStateId);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.combo.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed || opntIsTeching || opntIsDowned || opntIsDying) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  } else {\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.combo.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - combo resets on time\n  if (state.resetCounter > Timers.COMBO_STRING_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If combo should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.combo.endFrame = playerFrame.frame;\n    state.combo.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n    state.event = ComboEvent.COMBO_END;\n\n    state.combo = null;\n    state.move = null;\n  }\n}\n","import { EventEmitter } from \"events\";\nimport { filter, get, groupBy, last, orderBy } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ConversionType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isGrabbed,\n  isInControl,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ninterface PlayerConversionState {\n  conversion: ConversionType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n}\n\ninterface MetadataType {\n  lastEndFrameByOppIdx: {\n    [oppIdx: number]: number;\n  };\n}\n\nexport class ConversionComputer extends EventEmitter implements StatComputer<ConversionType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private conversions = new Array<ConversionType>();\n  private state = new Map<PlayerIndexedType, PlayerConversionState>();\n  private metadata: MetadataType;\n  private settings: GameStartType | null = null;\n\n  public constructor() {\n    super();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n  }\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.conversions = [];\n    this.state = new Map();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n    this.settings = settings;\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerConversionState = {\n        conversion: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        const terminated = handleConversionCompute(allFrames, state, indices, frame, this.conversions);\n        if (terminated) {\n          this.emit(\"CONVERSION\", {\n            combo: last(this.conversions),\n            settings: this.settings,\n          });\n        }\n      }\n    });\n  }\n\n  public fetch(): ConversionType[] {\n    this._populateConversionTypes();\n    return this.conversions;\n  }\n\n  private _populateConversionTypes(): void {\n    // Post-processing step: set the openingTypes\n    const conversionsToHandle = filter(this.conversions, (conversion) => {\n      return conversion.openingType === \"unknown\";\n    });\n\n    // Group new conversions by startTime and sort\n    const groupedConversions = groupBy(conversionsToHandle, \"startFrame\");\n    const sortedConversions = orderBy(groupedConversions, (conversions) => get(conversions, [0, \"startFrame\"]));\n\n    // Set the opening types on the conversions we need to handle\n    sortedConversions.forEach((conversions) => {\n      const isTrade = conversions.length >= 2;\n      conversions.forEach((conversion) => {\n        // Set end frame for this conversion\n        this.metadata.lastEndFrameByOppIdx[conversion.playerIndex] = conversion.endFrame!;\n\n        if (isTrade) {\n          // If trade, just short-circuit\n          conversion.openingType = \"trade\";\n          return;\n        }\n\n        // If not trade, check the opponent endFrame\n        const lastMove = last(conversion.moves);\n        const oppEndFrame =\n          this.metadata.lastEndFrameByOppIdx[lastMove ? lastMove.playerIndex : conversion.playerIndex];\n        const isCounterAttack = oppEndFrame && oppEndFrame > conversion.startFrame;\n        conversion.openingType = isCounterAttack ? \"counter-attack\" : \"neutral-win\";\n      });\n    });\n  }\n}\n\nfunction handleConversionCompute(\n  frames: FramesType,\n  state: PlayerConversionState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  conversions: ConversionType[],\n): boolean {\n  const currentFrameNumber = frame.frame;\n  const playerFrame: PostFrameUpdateType = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a conversion or\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    if (!state.conversion) {\n      state.conversion = {\n        playerIndex: indices.opponentIndex,\n        lastHitBy: indices.playerIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        openingType: \"unknown\", // Will be updated later\n      };\n\n      conversions.push(state.conversion);\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.conversion.moves.push(state.move);\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n  }\n\n  if (!state.conversion) {\n    // The rest of the function handles conversion termination logic, so if we don't\n    // have a conversion started, there is no need to continue\n    return false;\n  }\n\n  const opntInControl = isInControl(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.conversion.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  }\n\n  const shouldStartResetCounter = state.resetCounter === 0 && opntInControl;\n  const shouldContinueResetCounter = state.resetCounter > 0;\n  if (shouldStartResetCounter || shouldContinueResetCounter) {\n    // This will increment the reset timer under the following conditions:\n    // 1) if we were punishing opponent but they have now entered an actionable state\n    // 2) if counter has already started counting meaning opponent has entered actionable state\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.conversion.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - conversion resets on time\n  if (state.resetCounter > Timers.PUNISH_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If conversion should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.conversion.endFrame = playerFrame.frame;\n    state.conversion.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n\n    state.conversion = null;\n    state.move = null;\n  }\n\n  return shouldTerminate;\n}\n","export enum Command {\n  MESSAGE_SIZES = 0x35,\n  GAME_START = 0x36,\n  PRE_FRAME_UPDATE = 0x37,\n  POST_FRAME_UPDATE = 0x38,\n  GAME_END = 0x39,\n  ITEM_UPDATE = 0x3b,\n  FRAME_BOOKEND = 0x3c,\n}\n\nexport interface PlayerType {\n  playerIndex: number;\n  port: number;\n  characterId: number | null;\n  characterColor: number | null;\n  startStocks: number | null;\n  type: number | null;\n  teamId: number | null;\n  controllerFix: string | null;\n  nametag: string | null;\n  displayName: string;\n  connectCode: string;\n}\n\nexport enum GameMode {\n  VS = 0x02,\n  ONLINE = 0x08,\n}\n\nexport interface GameStartType {\n  slpVersion: string | null;\n  isTeams: boolean | null;\n  isPAL: boolean | null;\n  stageId: number | null;\n  players: PlayerType[];\n  scene: number | null;\n  gameMode: GameMode | null;\n}\n\nexport interface PreFrameUpdateType {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  seed: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  joystickX: number | null;\n  joystickY: number | null;\n  cStickX: number | null;\n  cStickY: number | null;\n  trigger: number | null;\n  buttons: number | null;\n  physicalButtons: number | null;\n  physicalLTrigger: number | null;\n  physicalRTrigger: number | null;\n  percent: number | null;\n}\n\nexport interface PostFrameUpdateType {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  internalCharacterId: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  percent: number | null;\n  shieldSize: number | null;\n  lastAttackLanded: number | null;\n  currentComboCount: number | null;\n  lastHitBy: number | null;\n  stocksRemaining: number | null;\n  actionStateCounter: number | null;\n  miscActionState: number | null;\n  isAirborne: boolean | null;\n  lastGroundId: number | null;\n  jumpsRemaining: number | null;\n  lCancelStatus: number | null;\n  hurtboxCollisionState: number | null;\n  selfInducedSpeeds: SelfInducedSpeedsType | null;\n}\n\nexport interface SelfInducedSpeedsType {\n  airX: number | null;\n  y: number | null;\n  attackX: number | null;\n  attackY: number | null;\n  groundX: number | null;\n}\n\nexport interface ItemUpdateType {\n  frame: number | null;\n  typeId: number | null;\n  state: number | null;\n  facingDirection: number | null;\n  velocityX: number | null;\n  velocityY: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  damageTaken: number | null;\n  expirationTimer: number | null;\n  spawnId: number | null;\n  missileType: number | null;\n  turnipFace: number | null;\n  chargeShotLaunched: number | null;\n  chargePower: number | null;\n  owner: number | null;\n}\n\nexport interface FrameBookendType {\n  frame: number | null;\n  latestFinalizedFrame: number | null;\n}\n\nexport interface GameEndType {\n  gameEndMethod: number | null;\n  lrasInitiatorIndex: number | null;\n}\n\nexport interface MetadataType {\n  startAt?: string | null;\n  playedOn?: string | null;\n  lastFrame?: number | null;\n  players?: {\n    [playerIndex: number]: {\n      characters: {\n        [internalCharacterId: number]: number;\n      };\n      names?: {\n        netplay?: string | null;\n        code?: string | null;\n      };\n    };\n  } | null;\n  consoleNick?: string | null;\n}\n\nexport type EventPayloadTypes =\n  | GameStartType\n  | PreFrameUpdateType\n  | PostFrameUpdateType\n  | ItemUpdateType\n  | FrameBookendType\n  | GameEndType;\n\nexport type EventCallbackFunc = (command: Command, payload?: EventPayloadTypes | null) => boolean;\n\nexport interface FrameEntryType {\n  frame: number;\n  players: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  followers: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  items?: ItemUpdateType[];\n}\n\nexport enum Frames {\n  FIRST = -123,\n  FIRST_PLAYABLE = -39,\n}\n\nexport interface FramesType {\n  [frameIndex: number]: FrameEntryType;\n}\n\nexport interface RollbackFramesType {\n  [frameIndex: number]: FrameEntryType[];\n}\n\nexport interface RollbackFrames {\n  frames: RollbackFramesType;\n  count: number;\n  lengths: number[];\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\nimport type { PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nenum JoystickRegion {\n  DZ = 0,\n  NE = 1,\n  SE = 2,\n  SW = 3,\n  NW = 4,\n  N = 5,\n  E = 6,\n  S = 7,\n  W = 8,\n}\n\nexport interface PlayerInput {\n  playerIndex: number;\n  opponentIndex: number;\n  inputCount: number;\n  joystickInputCount: number;\n  cstickInputCount: number;\n  buttonInputCount: number;\n  triggerInputCount: number;\n}\n\nexport class InputComputer implements StatComputer<PlayerInput[]> {\n  private state = new Map<PlayerIndexedType, PlayerInput>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerInput = {\n        playerIndex: indices.playerIndex,\n        opponentIndex: indices.opponentIndex,\n        inputCount: 0,\n        joystickInputCount: 0,\n        cstickInputCount: 0,\n        buttonInputCount: 0,\n        triggerInputCount: 0,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleInputCompute(allFrames, state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): PlayerInput[] {\n    return Array.from(this.state.values());\n  }\n}\n\nfunction handleInputCompute(\n  frames: FramesType,\n  state: PlayerInput,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.pre;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.pre : null;\n\n  if (currentFrameNumber < Frames.FIRST_PLAYABLE || !prevPlayerFrame) {\n    // Don't count inputs until the game actually starts\n    return;\n  }\n\n  // First count the number of buttons that go from 0 to 1\n  // Increment action count by amount of button presses\n  const invertedPreviousButtons = ~prevPlayerFrame.physicalButtons!;\n  const currentButtons = playerFrame.physicalButtons!;\n  const buttonChanges = invertedPreviousButtons & currentButtons & 0xfff;\n  const newInputsPressed = countSetBits(buttonChanges);\n  state.inputCount += newInputsPressed;\n  state.buttonInputCount += newInputsPressed;\n\n  // Increment action count when sticks change from one region to another.\n  // Don't increment when stick returns to deadzone\n  const prevAnalogRegion = getJoystickRegion(prevPlayerFrame.joystickX!, prevPlayerFrame.joystickY!);\n  const currentAnalogRegion = getJoystickRegion(playerFrame.joystickX!, playerFrame.joystickY!);\n  if (prevAnalogRegion !== currentAnalogRegion && currentAnalogRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.joystickInputCount += 1;\n  }\n\n  // Do the same for c-stick\n  const prevCstickRegion = getJoystickRegion(prevPlayerFrame.cStickX!, prevPlayerFrame.cStickY!);\n  const currentCstickRegion = getJoystickRegion(playerFrame.cStickX!, playerFrame.cStickY!);\n  if (prevCstickRegion !== currentCstickRegion && currentCstickRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.cstickInputCount += 1;\n  }\n\n  // Increment action on analog trigger... I'm not sure when. This needs revision\n  // Currently will update input count when the button gets pressed past 0.3\n  // Changes from hard shield to light shield should probably count as inputs but\n  // are not counted here\n  if (prevPlayerFrame.physicalLTrigger! < 0.3 && playerFrame.physicalLTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n  if (prevPlayerFrame.physicalRTrigger! < 0.3 && playerFrame.physicalRTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n}\n\nfunction countSetBits(x: number): number {\n  // This function solves the Hamming Weight problem. Effectively it counts the number of\n  // bits in the input that are set to 1\n  // This implementation is supposedly very efficient when most bits are zero.\n  // Found: https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation\n  let bits = x;\n\n  let count;\n  for (count = 0; bits; count += 1) {\n    bits &= bits - 1;\n  }\n  return count;\n}\n\nfunction getJoystickRegion(x: number, y: number): JoystickRegion {\n  let region = JoystickRegion.DZ;\n\n  if (x >= 0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NE;\n  } else if (x >= 0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SE;\n  } else if (x <= -0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SW;\n  } else if (x <= -0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NW;\n  } else if (y >= 0.2875) {\n    region = JoystickRegion.N;\n  } else if (x >= 0.2875) {\n    region = JoystickRegion.E;\n  } else if (y <= -0.2875) {\n    region = JoystickRegion.S;\n  } else if (x <= -0.2875) {\n    region = JoystickRegion.W;\n  }\n\n  return region;\n}\n","import { first, flatten, get, groupBy, keyBy, last, mapValues, zip } from \"lodash\";\n\nimport type { GameStartType } from \"../types\";\nimport type { ConversionType, InputCountsType, OverallType, RatioType } from \"./common\";\nimport type { PlayerInput } from \"./inputs\";\n\ninterface ConversionsByPlayerByOpening {\n  [playerIndex: string]: {\n    [openingType: string]: ConversionType[];\n  };\n}\n\nexport function generateOverallStats({\n  settings,\n  inputs,\n  conversions,\n  playableFrameCount,\n}: {\n  settings: GameStartType;\n  inputs: PlayerInput[];\n  conversions: ConversionType[];\n  playableFrameCount: number;\n}): OverallType[] {\n  const inputsByPlayer = keyBy(inputs, \"playerIndex\");\n  const originalConversions = conversions;\n  const conversionsByPlayer = groupBy(conversions, (conv) => conv.moves[0]?.playerIndex);\n  const conversionsByPlayerByOpening: ConversionsByPlayerByOpening = mapValues(conversionsByPlayer, (conversions) =>\n    groupBy(conversions, \"openingType\"),\n  );\n\n  const gameMinutes = playableFrameCount / 3600;\n\n  const overall = settings.players.map((player) => {\n    const playerIndex = player.playerIndex;\n\n    const playerInputs = get(inputsByPlayer, playerIndex) || {};\n    const inputCounts: InputCountsType = {\n      buttons: get(playerInputs, \"buttonInputCount\"),\n      triggers: get(playerInputs, \"triggerInputCount\"),\n      cstick: get(playerInputs, \"cstickInputCount\"),\n      joystick: get(playerInputs, \"joystickInputCount\"),\n      total: get(playerInputs, \"inputCount\"),\n    };\n    // const conversions = get(conversionsByPlayer, playerIndex) || [];\n    // const successfulConversions = conversions.filter((conversion) => conversion.moves.length > 1);\n    let conversionCount = 0;\n    let successfulConversionCount = 0;\n\n    const opponentIndices = settings.players\n      .filter((opp) => {\n        // We want players which aren't ourselves\n        if (opp.playerIndex === playerIndex) {\n          return false;\n        }\n\n        // Make sure they're not on our team either\n        return !settings.isTeams || opp.teamId !== player.teamId;\n      })\n      .map((opp) => opp.playerIndex);\n\n    let totalDamage = 0;\n    let killCount = 0;\n\n    // These are the conversions that we did on our opponents\n    originalConversions\n      // Filter down to conversions of our opponent\n      .filter((conversion) => conversion.playerIndex !== playerIndex)\n      .forEach((conversion) => {\n        conversionCount++;\n\n        // We killed the opponent\n        if (conversion.didKill && conversion.lastHitBy === playerIndex) {\n          killCount += 1;\n        }\n        if (conversion.moves.length > 1 && conversion.moves[0]!.playerIndex === playerIndex) {\n          successfulConversionCount++;\n        }\n        conversion.moves.forEach((move) => {\n          if (move.playerIndex === playerIndex) {\n            totalDamage += move.damage;\n          }\n        });\n      });\n\n    return {\n      playerIndex: playerIndex,\n      inputCounts: inputCounts,\n      conversionCount: conversionCount,\n      totalDamage: totalDamage,\n      killCount: killCount,\n\n      successfulConversions: getRatio(successfulConversionCount, conversionCount),\n      inputsPerMinute: getRatio(inputCounts.total, gameMinutes),\n      digitalInputsPerMinute: getRatio(inputCounts.buttons, gameMinutes),\n      openingsPerKill: getRatio(conversionCount, killCount),\n      damagePerOpening: getRatio(totalDamage, conversionCount),\n      neutralWinRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"neutral-win\"),\n      counterHitRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"counter-attack\"),\n      beneficialTradeRatio: getBeneficialTradeRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices),\n    };\n  });\n\n  return overall;\n}\n\nfunction getRatio(count: number, total: number): RatioType {\n  return {\n    count: count,\n    total: total,\n    ratio: total ? count / total : null,\n  };\n}\n\nfunction getOpeningRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n  type: string,\n): RatioType {\n  const openings = get(conversionsByPlayerByOpening, [playerIndex, type]) || [];\n\n  const opponentOpenings = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, type]) || []),\n  );\n\n  return getRatio(openings.length, openings.length + opponentOpenings.length);\n}\n\nfunction getBeneficialTradeRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n): RatioType {\n  const playerTrades = get(conversionsByPlayerByOpening, [playerIndex, \"trade\"]) || [];\n  const opponentTrades = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, \"trade\"]) || []),\n  );\n\n  const benefitsPlayer = [];\n\n  // Figure out which punishes benefited this player\n  const zippedTrades = zip(playerTrades, opponentTrades);\n  zippedTrades.forEach((conversionPair) => {\n    const playerConversion = first(conversionPair);\n    const opponentConversion = last(conversionPair);\n    if (playerConversion && opponentConversion) {\n      const playerDamage = playerConversion.currentPercent - playerConversion.startPercent;\n      const opponentDamage = opponentConversion.currentPercent - opponentConversion.startPercent;\n\n      if (playerConversion!.didKill && !opponentConversion!.didKill) {\n        benefitsPlayer.push(playerConversion);\n      } else if (playerDamage > opponentDamage) {\n        benefitsPlayer.push(playerConversion);\n      }\n    }\n  });\n\n  return getRatio(benefitsPlayer.length, playerTrades.length);\n}\n","import { get } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\n\nexport interface StatComputer<T> {\n  setup(settings: GameStartType): void;\n  processFrame(newFrame: FrameEntryType, allFrames: FramesType): void;\n  fetch(): T;\n}\n\nexport interface StatOptions {\n  processOnTheFly: boolean;\n}\n\nconst defaultOptions: StatOptions = {\n  processOnTheFly: false,\n};\n\nexport class Stats {\n  private options: StatOptions;\n  private lastProcessedFrame: number | null = null;\n  private frames: FramesType = {};\n  private players: number[] = [];\n  private allComputers = new Array<StatComputer<unknown>>();\n\n  public constructor(options?: StatOptions) {\n    this.options = Object.assign({}, defaultOptions, options);\n  }\n\n  /**\n   * Should reset the frames to their default values.\n   */\n  public setup(settings: GameStartType): void {\n    // Reset the frames since it's a new game\n    this.frames = {};\n    this.players = settings.players.map((v) => v.playerIndex);\n\n    // Forward the settings on to the individual stat computer\n    this.allComputers.forEach((comp) => comp.setup(settings));\n  }\n\n  public register(...computer: StatComputer<unknown>[]): void {\n    this.allComputers.push(...computer);\n  }\n\n  public process(): void {\n    if (this.players.length === 0) {\n      return;\n    }\n\n    let i = this.lastProcessedFrame !== null ? this.lastProcessedFrame + 1 : Frames.FIRST;\n    while (this.frames[i]) {\n      const frame = this.frames[i];\n      // Don't attempt to compute stats on frames that have not been fully received\n      if (!isCompletedFrame(this.players, frame)) {\n        return;\n      }\n      this.allComputers.forEach((comp) => comp.processFrame(frame, this.frames));\n      this.lastProcessedFrame = i;\n      i++;\n    }\n  }\n\n  public addFrame(frame: FrameEntryType): void {\n    this.frames[frame.frame] = frame;\n\n    if (this.options.processOnTheFly) {\n      this.process();\n    }\n  }\n}\n\nfunction isCompletedFrame(players: number[], frame?: FrameEntryType): frame is FrameEntryType {\n  if (!frame) {\n    return false;\n  }\n\n  // This function checks whether we have successfully received an entire frame.\n  // It is not perfect because it does not wait for follower frames. Fortunately,\n  // follower frames are not used for any stat calculations so this doesn't matter\n  // for our purposes.\n  for (const player of players) {\n    const playerPostFrame = get(frame, [\"players\", player, \"post\"]);\n    if (!playerPostFrame) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport type { PlayerIndexedType, StockType } from \"./common\";\nimport { didLoseStock, getSinglesPlayerPermutationsFromSettings, isDead } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ninterface StockState {\n  stock?: StockType | null;\n}\n\nexport class StockComputer implements StatComputer<StockType[]> {\n  private state = new Map<PlayerIndexedType, StockState>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private stocks = new Array<StockType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.stocks = [];\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: StockState = {\n        stock: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleStockCompute(allFrames, state, indices, frame, this.stocks);\n      }\n    });\n  }\n\n  public fetch(): StockType[] {\n    return this.stocks;\n  }\n}\n\nfunction handleStockCompute(\n  frames: FramesType,\n  state: StockState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  stocks: StockType[],\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.post : null;\n\n  // If there is currently no active stock, wait until the player is no longer spawning.\n  // Once the player is no longer spawning, start the stock\n  if (!state.stock) {\n    const isPlayerDead = isDead(playerFrame.actionStateId!);\n    if (isPlayerDead) {\n      return;\n    }\n\n    state.stock = {\n      playerIndex: indices.playerIndex,\n      startFrame: currentFrameNumber,\n      endFrame: null,\n      startPercent: 0,\n      endPercent: null,\n      currentPercent: 0,\n      count: playerFrame.stocksRemaining!,\n      deathAnimation: null,\n    };\n\n    stocks.push(state.stock);\n  } else if (prevPlayerFrame && didLoseStock(playerFrame, prevPlayerFrame)) {\n    state.stock.endFrame = playerFrame.frame;\n    state.stock.endPercent = prevPlayerFrame.percent ?? 0;\n    state.stock.deathAnimation = playerFrame.actionStateId;\n    state.stock = null;\n  } else {\n    state.stock.currentPercent = playerFrame.percent ?? 0;\n  }\n}\n","import { decode, encode } from \"@shelacek/ubjson\";\n\nexport enum CommunicationType {\n  HANDSHAKE = 1,\n  REPLAY = 2,\n  KEEP_ALIVE = 3,\n}\n\nexport interface CommunicationMessage {\n  type: CommunicationType;\n  payload: {\n    cursor: Uint8Array;\n    clientToken: Uint8Array;\n    pos: Uint8Array;\n    nextPos: Uint8Array;\n    data: Uint8Array;\n    nick: string | null;\n    forcePos: boolean;\n    nintendontVersion: string | null;\n  };\n}\n\n// This class is responsible for handling the communication protocol between the Wii and the\n// desktop app\nexport class ConsoleCommunication {\n  private receiveBuf = Buffer.from([]);\n  private messages = new Array<CommunicationMessage>();\n\n  public receive(data: Buffer): void {\n    this.receiveBuf = Buffer.concat([this.receiveBuf, data]);\n\n    while (this.receiveBuf.length >= 4) {\n      // First get the size of the message we are expecting\n      const msgSize = this.receiveBuf.readUInt32BE(0);\n\n      if (this.receiveBuf.length < msgSize + 4) {\n        // If we haven't received all the data yet, let's wait for more\n        return;\n      }\n\n      // Here we have received all the data, so let's decode it\n      const ubjsonData = this.receiveBuf.slice(4, msgSize + 4);\n      this.messages.push(decode(ubjsonData));\n\n      // Remove the processed data from receiveBuf\n      this.receiveBuf = this.receiveBuf.slice(msgSize + 4);\n    }\n  }\n\n  public getReceiveBuffer(): Buffer {\n    return this.receiveBuf;\n  }\n\n  public getMessages(): Array<CommunicationMessage> {\n    const toReturn = this.messages;\n    this.messages = [];\n\n    return toReturn;\n  }\n\n  public genHandshakeOut(cursor: Uint8Array, clientToken: number, isRealtime = false): Buffer {\n    const clientTokenBuf = Buffer.from([0, 0, 0, 0]);\n    clientTokenBuf.writeUInt32BE(clientToken, 0);\n\n    const message = {\n      type: CommunicationType.HANDSHAKE,\n      payload: {\n        cursor: cursor,\n        clientToken: Uint8Array.from(clientTokenBuf), // TODO: Use real instance token\n        isRealtime: isRealtime,\n      },\n    };\n\n    const buf = encode(message, {\n      optimizeArrays: true,\n    });\n\n    const msg = Buffer.concat([Buffer.from([0, 0, 0, 0]), Buffer.from(buf)]);\n\n    msg.writeUInt32BE(buf.byteLength, 0);\n\n    return msg;\n  }\n}\n","import type { EventEmitter } from \"events\";\n\nexport enum ConnectionEvent {\n  CONNECT = \"connect\",\n  MESSAGE = \"message\",\n  HANDSHAKE = \"handshake\",\n  STATUS_CHANGE = \"statusChange\",\n  DATA = \"data\",\n  ERROR = \"error\",\n}\n\nexport enum ConnectionStatus {\n  DISCONNECTED = 0,\n  CONNECTING = 1,\n  CONNECTED = 2,\n  RECONNECT_WAIT = 3,\n}\n\nexport enum Ports {\n  DEFAULT = 51441,\n  LEGACY = 666,\n  RELAY_START = 53741,\n}\n\nexport interface ConnectionDetails {\n  consoleNick: string;\n  gameDataCursor: number | Uint8Array;\n  version: string;\n  clientToken?: number;\n}\n\nexport interface ConnectionSettings {\n  ipAddress: string;\n  port: number;\n}\n\nexport interface Connection extends EventEmitter {\n  getStatus(): ConnectionStatus;\n  getSettings(): ConnectionSettings;\n  getDetails(): ConnectionDetails;\n  connect(ip: string, port: number): void;\n  disconnect(): void;\n}\n","import { EventEmitter } from \"events\";\nimport net from \"net\";\nimport inject from \"reconnect-core\";\n\nimport type { CommunicationMessage } from \"./communication\";\nimport { CommunicationType, ConsoleCommunication } from \"./communication\";\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nexport const NETWORK_MESSAGE = \"HELO\\0\";\n\nconst DEFAULT_CONNECTION_TIMEOUT_MS = 20000;\n\nenum CommunicationState {\n  INITIAL = \"initial\",\n  LEGACY = \"legacy\",\n  NORMAL = \"normal\",\n}\n\nconst defaultConnectionDetails: ConnectionDetails = {\n  consoleNick: \"unknown\",\n  gameDataCursor: Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]),\n  version: \"\",\n  clientToken: 0,\n};\n\nconst consoleConnectionOptions = {\n  autoReconnect: true,\n};\n\nexport type ConsoleConnectionOptions = typeof consoleConnectionOptions;\n\n/**\n * Responsible for maintaining connection to a Slippi relay connection or Wii connection.\n * Events are emitted whenever data is received.\n *\n * Basic usage example:\n *\n * ```javascript\n * const { ConsoleConnection } = require(\"@slippi/slippi-js\");\n *\n * const connection = new ConsoleConnection();\n * connection.connect(\"localhost\", 667); // You should set these values appropriately\n *\n * connection.on(\"data\", (data) => {\n *   // Received data from console\n *   console.log(data);\n * });\n *\n * connection.on(\"statusChange\", (status) => {\n *   console.log(`status changed: ${status}`);\n * });\n * ```\n */\nexport class ConsoleConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private isRealtime: boolean;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private connDetails: ConnectionDetails = { ...defaultConnectionDetails };\n  private client: net.Socket | null = null;\n  private connection: inject.Instance<unknown, net.Socket> | null = null;\n  private options: ConsoleConnectionOptions;\n  private shouldReconnect = false;\n\n  public constructor(options?: Partial<ConsoleConnectionOptions>) {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n    this.isRealtime = false;\n    this.options = Object.assign({}, consoleConnectionOptions, options);\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  /**\n   * @returns The specific details about the connected console.\n   */\n  public getDetails(): ConnectionDetails {\n    return { ...this.connDetails };\n  }\n\n  /**\n   * Initiate a connection to the Wii or Slippi relay.\n   * @param ip   The IP address of the Wii or Slippi relay.\n   * @param port The port to connect to.\n   * @param isRealtime Optional. A flag to tell the Wii to send data as quickly as possible\n   * @param timeout Optional. The timeout in milliseconds when attempting to connect\n   *                to the Wii or relay.\n   */\n  public connect(ip: string, port: number, isRealtime = false, timeout = DEFAULT_CONNECTION_TIMEOUT_MS): void {\n    this.ipAddress = ip;\n    this.port = port;\n    this.isRealtime = isRealtime;\n    this._connectOnPort(ip, port, timeout);\n  }\n\n  private _connectOnPort(ip: string, port: number, timeout: number): void {\n    // set up reconnect\n    const reconnect = inject(() =>\n      net.connect({\n        host: ip,\n        port: port,\n        timeout: timeout,\n      }),\n    );\n\n    // Indicate we are connecting\n    this._setStatus(ConnectionStatus.CONNECTING);\n\n    // Prepare console communication obj for talking UBJSON\n    const consoleComms = new ConsoleCommunication();\n\n    // TODO: reconnect on failed reconnect, not sure how\n    // TODO: to do this\n    const connection = reconnect(\n      {\n        initialDelay: 2000,\n        maxDelay: 10000,\n        strategy: \"fibonacci\",\n        failAfter: Infinity,\n      },\n      (client) => {\n        this.emit(ConnectionEvent.CONNECT);\n        // We successfully connected so turn on auto-reconnect\n        this.shouldReconnect = this.options.autoReconnect;\n        this.client = client;\n\n        let commState: CommunicationState = CommunicationState.INITIAL;\n        client.on(\"data\", (data) => {\n          if (commState === CommunicationState.INITIAL) {\n            commState = this._getInitialCommState(data);\n            console.log(`Connected to ${ip}:${port} with type: ${commState}`);\n            this._setStatus(ConnectionStatus.CONNECTED);\n            console.log(data.toString(\"hex\"));\n          }\n\n          if (commState === CommunicationState.LEGACY) {\n            // If the first message received was not a handshake message, either we\n            // connected to an old Nintendont version or a relay instance\n            this._handleReplayData(data);\n            return;\n          }\n\n          try {\n            consoleComms.receive(data);\n          } catch (err) {\n            console.error(\"Failed to process new data from server...\", {\n              error: err,\n              prevDataBuf: consoleComms.getReceiveBuffer(),\n              rcvData: data,\n            });\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n            return;\n          }\n          const messages = consoleComms.getMessages();\n\n          // Process all of the received messages\n          try {\n            messages.forEach((message) => this._processMessage(message));\n          } catch (err) {\n            // Disconnect client to send another handshake message\n            console.error(err);\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n          }\n        });\n\n        client.on(\"timeout\", () => {\n          // const previouslyConnected = this.connectionStatus === ConnectionStatus.CONNECTED;\n          console.warn(`Attempted connection to ${ip}:${port} timed out after ${timeout}ms`);\n          client.destroy();\n        });\n\n        client.on(\"end\", () => {\n          console.log(\"disconnect\");\n          if (!this.shouldReconnect) {\n            client.destroy();\n          }\n        });\n\n        client.on(\"close\", () => {\n          console.log(\"connection was closed\");\n        });\n\n        const handshakeMsgOut = consoleComms.genHandshakeOut(\n          this.connDetails.gameDataCursor as Uint8Array,\n          this.connDetails.clientToken ?? 0,\n          this.isRealtime,\n        );\n\n        client.write(handshakeMsgOut);\n      },\n    );\n\n    const setConnectingStatus = (): void => {\n      // Indicate we are connecting\n      this._setStatus(this.shouldReconnect ? ConnectionStatus.RECONNECT_WAIT : ConnectionStatus.CONNECTING);\n    };\n\n    connection.on(\"connect\", setConnectingStatus);\n    connection.on(\"reconnect\", setConnectingStatus);\n\n    connection.on(\"disconnect\", () => {\n      if (!this.shouldReconnect) {\n        connection.reconnect = false;\n        connection.disconnect();\n        this._setStatus(ConnectionStatus.DISCONNECTED);\n      }\n      // TODO: Figure out how to set RECONNECT_WAIT state here. Currently it will stay on\n      // TODO: Connecting... forever\n    });\n\n    connection.on(\"error\", (err) => {\n      console.warn(`Connection on port ${port} encountered an error.`, err);\n\n      this._setStatus(ConnectionStatus.DISCONNECTED);\n      this.emit(ConnectionEvent.ERROR, `Connection on port ${port} encountered an error.\\n${err}`);\n    });\n\n    this.connection = connection;\n    connection.connect(port);\n  }\n\n  /**\n   * Terminate the current connection.\n   */\n  public disconnect(): void {\n    // Prevent reconnections and disconnect\n    if (this.connection) {\n      this.connection.reconnect = false;\n      this.connection.disconnect();\n      this.connection = null;\n    }\n\n    if (this.client) {\n      this.client.destroy();\n    }\n  }\n\n  private _getInitialCommState(data: Buffer): CommunicationState {\n    if (data.length < 13) {\n      return CommunicationState.LEGACY;\n    }\n\n    const openingBytes = Buffer.from([0x7b, 0x69, 0x04, 0x74, 0x79, 0x70, 0x65, 0x55, 0x01]);\n\n    const dataStart = data.slice(4, 13);\n\n    return dataStart.equals(openingBytes) ? CommunicationState.NORMAL : CommunicationState.LEGACY;\n  }\n\n  private _processMessage(message: CommunicationMessage): void {\n    this.emit(ConnectionEvent.MESSAGE, message);\n    switch (message.type) {\n      case CommunicationType.KEEP_ALIVE:\n        // console.log(\"Keep alive message received\");\n\n        // TODO: This is the jankiest shit ever but it will allow for relay connections not\n        // TODO: to time out as long as the main connection is still receving keep alive messages\n        // TODO: Need to figure out a better solution for this. There should be no need to have an\n        // TODO: active Wii connection for the relay connection to keep itself alive\n        const fakeKeepAlive = Buffer.from(NETWORK_MESSAGE);\n        this._handleReplayData(fakeKeepAlive);\n\n        break;\n      case CommunicationType.REPLAY:\n        const readPos = Uint8Array.from(message.payload.pos);\n        const cmp = Buffer.compare(this.connDetails.gameDataCursor as Uint8Array, readPos);\n        if (!message.payload.forcePos && cmp !== 0) {\n          // The readPos is not the one we are waiting on, throw error\n          throw new Error(\n            `Position of received data is incorrect. Expected: ${this.connDetails.gameDataCursor.toString()}, Received: ${readPos.toString()}`,\n          );\n        }\n\n        if (message.payload.forcePos) {\n          console.warn(\n            \"Overflow occured in Nintendont, data has likely been skipped and replay corrupted. \" +\n              \"Expected, Received:\",\n            this.connDetails.gameDataCursor,\n            readPos,\n          );\n        }\n\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.nextPos);\n\n        const data = Uint8Array.from(message.payload.data);\n        this._handleReplayData(data);\n        break;\n      case CommunicationType.HANDSHAKE:\n        const { nick, nintendontVersion } = message.payload;\n        if (nick) {\n          this.connDetails.consoleNick = nick;\n        }\n        const tokenBuf = Buffer.from(message.payload.clientToken);\n        this.connDetails.clientToken = tokenBuf.readUInt32BE(0);\n        if (nintendontVersion) {\n          this.connDetails.version = nintendontVersion;\n        }\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.pos);\n        this.emit(ConnectionEvent.HANDSHAKE, this.connDetails);\n        break;\n      default:\n        // Should this be an error?\n        break;\n    }\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n}\n","import { EventEmitter } from \"events\";\n\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nconst MAX_PEERS = 32;\n\nexport enum DolphinMessageType {\n  CONNECT_REPLY = \"connect_reply\",\n  GAME_EVENT = \"game_event\",\n  START_GAME = \"start_game\",\n  END_GAME = \"end_game\",\n}\n\nexport class DolphinConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private gameCursor = 0;\n  private nickname = \"unknown\";\n  private version = \"\";\n  private peer: any | null = null;\n\n  public constructor() {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  public getDetails(): ConnectionDetails {\n    return {\n      consoleNick: this.nickname,\n      gameDataCursor: this.gameCursor,\n      version: this.version,\n    };\n  }\n\n  public async connect(ip: string, port: number): Promise<void> {\n    console.log(`Connecting to: ${ip}:${port}`);\n    this.ipAddress = ip;\n    this.port = port;\n\n    const enet = await import(\"enet\");\n    // Create the enet client\n    const client = enet.createClient({ peers: MAX_PEERS, channels: 3, down: 0, up: 0 }, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    this.peer = client.connect(\n      {\n        address: this.ipAddress,\n        port: this.port,\n      },\n      3,\n      1337, // Data to send, not sure what this is or what this represents\n      (err: any, newPeer: any) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        newPeer.ping();\n        this.emit(ConnectionEvent.CONNECT);\n        this._setStatus(ConnectionStatus.CONNECTED);\n      },\n    );\n\n    this.peer.on(\"connect\", () => {\n      // Reset the game cursor to the beginning of the game. Do we need to do this or\n      // should it just continue from where it left off?\n      this.gameCursor = 0;\n\n      const request = {\n        type: \"connect_request\",\n        cursor: this.gameCursor,\n      };\n      const packet = new enet.Packet(JSON.stringify(request), enet.PACKET_FLAG.RELIABLE);\n      this.peer.send(0, packet);\n    });\n\n    this.peer.on(\"message\", (packet: any) => {\n      const data = packet.data();\n      if (data.length === 0) {\n        return;\n      }\n\n      const dataString = data.toString(\"ascii\");\n      const message = JSON.parse(dataString);\n      const { dolphin_closed } = message;\n      if (dolphin_closed) {\n        // We got a disconnection request\n        this.disconnect();\n        return;\n      }\n      this.emit(ConnectionEvent.MESSAGE, message);\n      switch (message.type) {\n        case DolphinMessageType.CONNECT_REPLY:\n          this.connectionStatus = ConnectionStatus.CONNECTED;\n          this.gameCursor = message.cursor;\n          this.nickname = message.nick;\n          this.version = message.version;\n          this.emit(ConnectionEvent.HANDSHAKE, this.getDetails());\n          break;\n        case DolphinMessageType.GAME_EVENT: {\n          const { payload } = message;\n          //TODO: remove after game start and end messages have been in stable Ishii for a bit\n          if (!payload) {\n            // We got a disconnection request\n            this.disconnect();\n            return;\n          }\n\n          this._updateCursor(message, dataString);\n\n          const gameData = Buffer.from(payload, \"base64\");\n          this._handleReplayData(gameData);\n          break;\n        }\n        case DolphinMessageType.START_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n        case DolphinMessageType.END_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n      }\n    });\n\n    this.peer.on(\"disconnect\", () => {\n      this.disconnect();\n    });\n\n    this._setStatus(ConnectionStatus.CONNECTING);\n  }\n\n  public disconnect(): void {\n    if (this.peer) {\n      this.peer.disconnect();\n      this.peer = null;\n    }\n    this._setStatus(ConnectionStatus.DISCONNECTED);\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n\n  private _updateCursor(message: { cursor: number; next_cursor: number }, dataString: string): void {\n    const { cursor, next_cursor } = message;\n\n    if (this.gameCursor !== cursor) {\n      const err = new Error(\n        `Unexpected game data cursor. Expected: ${this.gameCursor} but got: ${cursor}. Payload: ${dataString}`,\n      );\n      console.warn(err);\n      this.emit(ConnectionEvent.ERROR, err);\n    }\n\n    this.gameCursor = next_cursor;\n  }\n}\n","import { map } from \"lodash\";\n\nexport function toHalfwidth(str: string): string {\n  // Converts a fullwidth character to halfwidth\n  const convertChar = (charCode: number): number => {\n    /**\n     * Standard full width encodings\n     * https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)\n     */\n    if (charCode > 0xff00 && charCode < 0xff5f) {\n      return 0x0020 + (charCode - 0xff00);\n    }\n\n    // space:\n    if (charCode === 0x3000) {\n      return 0x0020;\n    }\n\n    /**\n     * Exceptions found in Melee/Japanese keyboards\n     */\n    // single quote: '\n    if (charCode === 0x2019) {\n      return 0x0027;\n    }\n\n    // double quote: \"\n    if (charCode === 0x201d) {\n      return 0x0022;\n    }\n\n    return charCode;\n  };\n\n  const ret = map(str, (char) => convertChar(char.charCodeAt(0)));\n\n  return String.fromCharCode(...ret);\n}\n","import { decode } from \"@shelacek/ubjson\";\nimport fs from \"fs\";\nimport iconv from \"iconv-lite\";\nimport { mapValues } from \"lodash\";\n\nimport type { EventCallbackFunc, EventPayloadTypes, MetadataType, PlayerType, SelfInducedSpeedsType } from \"../types\";\nimport { Command } from \"../types\";\nimport { toHalfwidth } from \"./fullwidth\";\n\nexport enum SlpInputSource {\n  BUFFER = \"buffer\",\n  FILE = \"file\",\n}\n\nexport interface SlpReadInput {\n  source: SlpInputSource;\n  filePath?: string;\n  buffer?: Buffer;\n}\n\nexport type SlpRefType = SlpFileSourceRef | SlpBufferSourceRef;\n\nexport interface SlpFileType {\n  ref: SlpRefType;\n  rawDataPosition: number;\n  rawDataLength: number;\n  metadataPosition: number;\n  metadataLength: number;\n  messageSizes: {\n    [command: number]: number;\n  };\n}\n\nexport interface SlpFileSourceRef {\n  source: SlpInputSource;\n  fileDescriptor: number;\n}\n\nexport interface SlpBufferSourceRef {\n  source: SlpInputSource;\n  buffer: Buffer;\n}\n\nfunction getRef(input: SlpReadInput): SlpRefType {\n  switch (input.source) {\n    case SlpInputSource.FILE:\n      if (!input.filePath) {\n        throw new Error(\"File source requires a file path\");\n      }\n      const fd = fs.openSync(input.filePath, \"r\");\n      return {\n        source: input.source,\n        fileDescriptor: fd,\n      } as SlpFileSourceRef;\n    case SlpInputSource.BUFFER:\n      return {\n        source: input.source,\n        buffer: input.buffer,\n      } as SlpBufferSourceRef;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction readRef(ref: SlpRefType, buffer: Uint8Array, offset: number, length: number, position: number): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      return fs.readSync((ref as SlpFileSourceRef).fileDescriptor, buffer, offset, length, position);\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.copy(buffer, offset, position, position + length);\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction getLenRef(ref: SlpRefType): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      const fileStats = fs.fstatSync((ref as SlpFileSourceRef).fileDescriptor);\n      return fileStats.size;\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.length;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\n/**\n * Opens a file at path\n */\nexport function openSlpFile(input: SlpReadInput): SlpFileType {\n  const ref = getRef(input);\n\n  const rawDataPosition = getRawDataPosition(ref);\n  const rawDataLength = getRawDataLength(ref, rawDataPosition);\n  const metadataPosition = rawDataPosition + rawDataLength + 10; // remove metadata string\n  const metadataLength = getMetadataLength(ref, metadataPosition);\n  const messageSizes = getMessageSizes(ref, rawDataPosition);\n\n  return {\n    ref: ref,\n    rawDataPosition: rawDataPosition,\n    rawDataLength: rawDataLength,\n    metadataPosition: metadataPosition,\n    metadataLength: metadataLength,\n    messageSizes: messageSizes,\n  };\n}\n\nexport function closeSlpFile(file: SlpFileType): void {\n  switch (file.ref.source) {\n    case SlpInputSource.FILE:\n      fs.closeSync((file.ref as SlpFileSourceRef).fileDescriptor);\n      break;\n  }\n}\n\n// This function gets the position where the raw data starts\nfunction getRawDataPosition(ref: SlpRefType): number {\n  const buffer = new Uint8Array(1);\n  readRef(ref, buffer, 0, buffer.length, 0);\n\n  if (buffer[0] === 0x36) {\n    return 0;\n  }\n\n  if (buffer[0] !== \"{\".charCodeAt(0)) {\n    return 0; // return error?\n  }\n\n  return 15;\n}\n\nfunction getRawDataLength(ref: SlpRefType, position: number): number {\n  const fileSize = getLenRef(ref);\n  if (position === 0) {\n    return fileSize;\n  }\n\n  const buffer = new Uint8Array(4);\n  readRef(ref, buffer, 0, buffer.length, position - 4);\n\n  const rawDataLen = (buffer[0]! << 24) | (buffer[1]! << 16) | (buffer[2]! << 8) | buffer[3]!;\n  if (rawDataLen > 0) {\n    // If this method manages to read a number, it's probably trustworthy\n    return rawDataLen;\n  }\n\n  // If the above does not return a valid data length,\n  // return a file size based on file length. This enables\n  // some support for severed files\n  return fileSize - position;\n}\n\nfunction getMetadataLength(ref: SlpRefType, position: number): number {\n  const len = getLenRef(ref);\n  return len - position - 1;\n}\n\nfunction getMessageSizes(\n  ref: SlpRefType,\n  position: number,\n): {\n  [command: number]: number;\n} {\n  const messageSizes: {\n    [command: number]: number;\n  } = {};\n  // Support old file format\n  if (position === 0) {\n    messageSizes[0x36] = 0x140;\n    messageSizes[0x37] = 0x6;\n    messageSizes[0x38] = 0x46;\n    messageSizes[0x39] = 0x1;\n    return messageSizes;\n  }\n\n  const buffer = new Uint8Array(2);\n  readRef(ref, buffer, 0, buffer.length, position);\n  if (buffer[0] !== Command.MESSAGE_SIZES) {\n    return {};\n  }\n\n  const payloadLength = buffer[1] as number;\n  (messageSizes[0x35] as any) = payloadLength;\n\n  const messageSizesBuffer = new Uint8Array(payloadLength - 1);\n  readRef(ref, messageSizesBuffer, 0, messageSizesBuffer.length, position + 2);\n  for (let i = 0; i < payloadLength - 1; i += 3) {\n    const command = messageSizesBuffer[i] as number;\n\n    // Get size of command\n    (messageSizes[command] as any) = (messageSizesBuffer[i + 1]! << 8) | messageSizesBuffer[i + 2]!;\n  }\n\n  return messageSizes;\n}\n\n/**\n * Iterates through slp events and parses payloads\n */\nexport function iterateEvents(\n  slpFile: SlpFileType,\n  callback: EventCallbackFunc,\n  startPos: number | null = null,\n): number {\n  const ref = slpFile.ref;\n\n  let readPosition = startPos !== null && startPos > 0 ? startPos : slpFile.rawDataPosition;\n  const stopReadingAt = slpFile.rawDataPosition + slpFile.rawDataLength;\n\n  // Generate read buffers for each\n  const commandPayloadBuffers = mapValues(slpFile.messageSizes, (size) => new Uint8Array(size + 1));\n\n  const commandByteBuffer = new Uint8Array(1);\n  while (readPosition < stopReadingAt) {\n    readRef(ref, commandByteBuffer, 0, 1, readPosition);\n    const commandByte = commandByteBuffer[0] as number;\n    const buffer = commandPayloadBuffers[commandByte];\n    if (buffer === undefined) {\n      // If we don't have an entry for this command, return false to indicate failed read\n      return readPosition;\n    }\n\n    if (buffer.length > stopReadingAt - readPosition) {\n      return readPosition;\n    }\n\n    readRef(ref, buffer, 0, buffer.length, readPosition);\n    const parsedPayload = parseMessage(commandByte, buffer);\n    const shouldStop = callback(commandByte, parsedPayload);\n    if (shouldStop) {\n      break;\n    }\n\n    readPosition += buffer.length;\n  }\n\n  return readPosition;\n}\n\nexport function parseMessage(command: Command, payload: Uint8Array): EventPayloadTypes | null {\n  const view = new DataView(payload.buffer);\n  switch (command) {\n    case Command.GAME_START:\n      const getPlayerObject = (playerIndex: number): PlayerType => {\n        // Controller Fix stuff\n        const cfOffset = playerIndex * 0x8;\n        const dashback = readUint32(view, 0x141 + cfOffset);\n        const shieldDrop = readUint32(view, 0x145 + cfOffset);\n        let cfOption = \"None\";\n        if (dashback !== shieldDrop) {\n          cfOption = \"Mixed\";\n        } else if (dashback === 1) {\n          cfOption = \"UCF\";\n        } else if (dashback === 2) {\n          cfOption = \"Dween\";\n        }\n\n        // Nametag stuff\n        const nametagLength = 0x10;\n        const nametagOffset = playerIndex * nametagLength;\n        const nametagStart = 0x161 + nametagOffset;\n        const nametagBuf = payload.slice(nametagStart, nametagStart + nametagLength);\n        const nameTagString = iconv\n          .decode(nametagBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const nametag = nameTagString ? toHalfwidth(nameTagString) : \"\";\n\n        // Display name\n        const displayNameLength = 0x1f;\n        const displayNameOffset = playerIndex * displayNameLength;\n        const displayNameStart = 0x1a5 + displayNameOffset;\n        const displayNameBuf = payload.slice(displayNameStart, displayNameStart + displayNameLength);\n        const displayNameString = iconv\n          .decode(displayNameBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const displayName = displayNameString ? toHalfwidth(displayNameString) : \"\";\n\n        // Connect code\n        const connectCodeLength = 0xa;\n        const connectCodeOffset = playerIndex * connectCodeLength;\n        const connectCodeStart = 0x221 + connectCodeOffset;\n        const connectCodeBuf = payload.slice(connectCodeStart, connectCodeStart + connectCodeLength);\n        const connectCodeString = iconv\n          .decode(connectCodeBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const connectCode = connectCodeString ? toHalfwidth(connectCodeString) : \"\";\n\n        const offset = playerIndex * 0x24;\n        return {\n          playerIndex: playerIndex,\n          port: playerIndex + 1,\n          characterId: readUint8(view, 0x65 + offset),\n          characterColor: readUint8(view, 0x68 + offset),\n          startStocks: readUint8(view, 0x67 + offset),\n          type: readUint8(view, 0x66 + offset),\n          teamId: readUint8(view, 0x6e + offset),\n          controllerFix: cfOption,\n          nametag: nametag,\n          displayName: displayName,\n          connectCode: connectCode,\n        };\n      };\n      return {\n        slpVersion: `${readUint8(view, 0x1)}.${readUint8(view, 0x2)}.${readUint8(view, 0x3)}`,\n        isTeams: readBool(view, 0xd),\n        isPAL: readBool(view, 0x1a1),\n        stageId: readUint16(view, 0x13),\n        players: [0, 1, 2, 3].map(getPlayerObject),\n        scene: readUint8(view, 0x1a3),\n        gameMode: readUint8(view, 0x1a4),\n      };\n    case Command.PRE_FRAME_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        seed: readUint32(view, 0x7),\n        actionStateId: readUint16(view, 0xb),\n        positionX: readFloat(view, 0xd),\n        positionY: readFloat(view, 0x11),\n        facingDirection: readFloat(view, 0x15),\n        joystickX: readFloat(view, 0x19),\n        joystickY: readFloat(view, 0x1d),\n        cStickX: readFloat(view, 0x21),\n        cStickY: readFloat(view, 0x25),\n        trigger: readFloat(view, 0x29),\n        buttons: readUint32(view, 0x2d),\n        physicalButtons: readUint16(view, 0x31),\n        physicalLTrigger: readFloat(view, 0x33),\n        physicalRTrigger: readFloat(view, 0x37),\n        percent: readFloat(view, 0x3c),\n      };\n    case Command.POST_FRAME_UPDATE:\n      const selfInducedSpeeds: SelfInducedSpeedsType = {\n        airX: readFloat(view, 0x35),\n        y: readFloat(view, 0x39),\n        attackX: readFloat(view, 0x3d),\n        attackY: readFloat(view, 0x41),\n        groundX: readFloat(view, 0x45),\n      };\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        internalCharacterId: readUint8(view, 0x7),\n        actionStateId: readUint16(view, 0x8),\n        positionX: readFloat(view, 0xa),\n        positionY: readFloat(view, 0xe),\n        facingDirection: readFloat(view, 0x12),\n        percent: readFloat(view, 0x16),\n        shieldSize: readFloat(view, 0x1a),\n        lastAttackLanded: readUint8(view, 0x1e),\n        currentComboCount: readUint8(view, 0x1f),\n        lastHitBy: readUint8(view, 0x20),\n        stocksRemaining: readUint8(view, 0x21),\n        actionStateCounter: readFloat(view, 0x22),\n        miscActionState: readFloat(view, 0x2b),\n        isAirborne: readBool(view, 0x2f),\n        lastGroundId: readUint16(view, 0x30),\n        jumpsRemaining: readUint8(view, 0x32),\n        lCancelStatus: readUint8(view, 0x33),\n        hurtboxCollisionState: readUint8(view, 0x34),\n        selfInducedSpeeds: selfInducedSpeeds,\n      };\n    case Command.ITEM_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        typeId: readUint16(view, 0x5),\n        state: readUint8(view, 0x7),\n        facingDirection: readFloat(view, 0x8),\n        velocityX: readFloat(view, 0xc),\n        velocityY: readFloat(view, 0x10),\n        positionX: readFloat(view, 0x14),\n        positionY: readFloat(view, 0x18),\n        damageTaken: readUint16(view, 0x1c),\n        expirationTimer: readFloat(view, 0x1e),\n        spawnId: readUint32(view, 0x22),\n        missileType: readUint8(view, 0x26),\n        turnipFace: readUint8(view, 0x27),\n        chargeShotLaunched: readUint8(view, 0x28),\n        chargePower: readUint8(view, 0x29),\n        owner: readInt8(view, 0x2a),\n      };\n    case Command.FRAME_BOOKEND:\n      return {\n        frame: readInt32(view, 0x1),\n        latestFinalizedFrame: readInt32(view, 0x5),\n      };\n    case Command.GAME_END:\n      return {\n        gameEndMethod: readUint8(view, 0x1),\n        lrasInitiatorIndex: readInt8(view, 0x2),\n      };\n    default:\n      return null;\n  }\n}\n\nfunction canReadFromView(view: DataView, offset: number, length: number): boolean {\n  const viewLength = view.byteLength;\n  return offset + length <= viewLength;\n}\n\nfunction readFloat(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getFloat32(offset);\n}\n\nfunction readInt32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getInt32(offset);\n}\n\nfunction readInt8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getInt8(offset);\n}\n\nfunction readUint32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getUint32(offset);\n}\n\nfunction readUint16(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 2)) {\n    return null;\n  }\n\n  return view.getUint16(offset);\n}\n\nfunction readUint8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getUint8(offset);\n}\n\nfunction readBool(view: DataView, offset: number): boolean | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return !!view.getUint8(offset);\n}\n\nexport function getMetadata(slpFile: SlpFileType): MetadataType | null {\n  if (slpFile.metadataLength <= 0) {\n    // This will happen on a severed incomplete file\n    // $FlowFixMe\n    return null;\n  }\n\n  const buffer = new Uint8Array(slpFile.metadataLength);\n\n  readRef(slpFile.ref, buffer, 0, buffer.length, slpFile.metadataPosition);\n\n  let metadata = null;\n  try {\n    metadata = decode(buffer);\n  } catch (ex) {\n    // Do nothing\n    // console.log(ex);\n  }\n\n  // $FlowFixMe\n  return metadata;\n}\n","import type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport { NETWORK_MESSAGE } from \"../console\";\nimport type { EventPayloadTypes } from \"../types\";\nimport { Command } from \"../types\";\nimport { parseMessage } from \"./slpReader\";\n\nexport enum SlpStreamMode {\n  AUTO = \"AUTO\", // Always reading data, but errors on invalid command\n  MANUAL = \"MANUAL\", // Stops parsing inputs after a valid game end command, requires manual restarting\n}\n\nconst defaultSettings = {\n  suppressErrors: false,\n  mode: SlpStreamMode.AUTO,\n};\n\nexport type SlpStreamSettings = typeof defaultSettings;\n\nexport type MessageSizes = Map<Command, number>;\n\nexport interface SlpCommandEventPayload {\n  command: Command;\n  payload: EventPayloadTypes | MessageSizes;\n}\n\nexport interface SlpRawEventPayload {\n  command: Command;\n  payload: Buffer;\n}\n\nexport enum SlpStreamEvent {\n  RAW = \"slp-raw\",\n  COMMAND = \"slp-command\",\n}\n\n/**\n * SlpStream is a writable stream of Slippi data. It passes the data being written in\n * and emits an event based on what kind of Slippi messages were processed.\n *\n * SlpStream emits two events: \"slp-raw\" and \"slp-command\". The \"slp-raw\" event emits the raw buffer\n * bytes whenever it processes each command. You can manually parse this or write it to a\n * file. The \"slp-command\" event returns the parsed payload which you can access the attributes.\n *\n * @class SlpStream\n * @extends {Writable}\n */\nexport class SlpStream extends Writable {\n  private gameEnded = false; // True only if in manual mode and the game has completed\n  private settings: SlpStreamSettings;\n  private payloadSizes: MessageSizes | null = null;\n  private previousBuffer: Uint8Array = Buffer.from([]);\n\n  /**\n   *Creates an instance of SlpStream.\n   * @param {Partial<SlpStreamSettings>} [slpOptions]\n   * @param {WritableOptions} [opts]\n   * @memberof SlpStream\n   */\n  public constructor(slpOptions?: Partial<SlpStreamSettings>, opts?: WritableOptions) {\n    super(opts);\n    this.settings = Object.assign({}, defaultSettings, slpOptions);\n  }\n\n  public restart(): void {\n    this.gameEnded = false;\n    this.payloadSizes = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public _write(newData: Buffer, encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n\n    // Join the current data with the old data\n    const data = Uint8Array.from(Buffer.concat([this.previousBuffer, newData]));\n\n    // Clear previous data\n    this.previousBuffer = Buffer.from([]);\n\n    const dataView = new DataView(data.buffer);\n\n    // Iterate through the data\n    let index = 0;\n    while (index < data.length) {\n      // We want to filter out the network messages\n      if (Buffer.from(data.slice(index, index + 5)).toString() === NETWORK_MESSAGE) {\n        index += 5;\n        continue;\n      }\n\n      // Make sure we have enough data to read a full payload\n      const command = dataView.getUint8(index);\n      let payloadSize = 0;\n      if (this.payloadSizes) {\n        payloadSize = this.payloadSizes.get(command) ?? 0;\n      }\n      const remainingLen = data.length - index;\n      if (remainingLen < payloadSize + 1) {\n        // If remaining length is not long enough for full payload, save the remaining\n        // data until we receive more data. The data has been split up.\n        this.previousBuffer = data.slice(index);\n        break;\n      }\n\n      // Only process if the game is still going\n      if (this.settings.mode === SlpStreamMode.MANUAL && this.gameEnded) {\n        break;\n      }\n\n      // Increment by one for the command byte\n      index += 1;\n\n      const payloadPtr = data.slice(index);\n      const payloadDataView = new DataView(data.buffer, index);\n      let payloadLen = 0;\n      try {\n        payloadLen = this._processCommand(command, payloadPtr, payloadDataView);\n      } catch (err) {\n        // Only throw the error if we're not suppressing the errors\n        if (!this.settings.suppressErrors) {\n          throw err;\n        }\n        payloadLen = 0;\n      }\n      index += payloadLen;\n    }\n\n    callback();\n  }\n\n  private _writeCommand(command: Command, entirePayload: Uint8Array, payloadSize: number): Uint8Array {\n    const payloadBuf = entirePayload.slice(0, payloadSize);\n    const bufToWrite = Buffer.concat([Buffer.from([command]), payloadBuf]);\n    // Forward the raw buffer onwards\n    this.emit(SlpStreamEvent.RAW, {\n      command: command,\n      payload: bufToWrite,\n    } as SlpRawEventPayload);\n    return new Uint8Array(bufToWrite);\n  }\n\n  private _processCommand(command: Command, entirePayload: Uint8Array, dataView: DataView): number {\n    // Handle the message size command\n    if (command === Command.MESSAGE_SIZES) {\n      const payloadSize = dataView.getUint8(0);\n      // Set the payload sizes\n      this.payloadSizes = processReceiveCommands(dataView);\n      // Emit the raw command event\n      this._writeCommand(command, entirePayload, payloadSize);\n      this.emit(SlpStreamEvent.COMMAND, {\n        command: command,\n        payload: this.payloadSizes,\n      } as SlpCommandEventPayload);\n      return payloadSize;\n    }\n\n    let payloadSize = 0;\n    if (this.payloadSizes) {\n      payloadSize = this.payloadSizes.get(command) ?? 0;\n    }\n\n    // Fetch the payload and parse it\n    let payload: Uint8Array;\n    let parsedPayload: EventPayloadTypes | null = null;\n    if (payloadSize > 0) {\n      payload = this._writeCommand(command, entirePayload, payloadSize);\n      parsedPayload = parseMessage(command, payload);\n    }\n    if (!parsedPayload) {\n      return payloadSize;\n    }\n\n    switch (command) {\n      case Command.GAME_END:\n        // Stop parsing data until we manually restart the stream\n        if (this.settings.mode === SlpStreamMode.MANUAL) {\n          this.gameEnded = true;\n        }\n        break;\n    }\n\n    this.emit(SlpStreamEvent.COMMAND, {\n      command: command,\n      payload: parsedPayload,\n    } as SlpCommandEventPayload);\n    return payloadSize;\n  }\n}\n\nconst processReceiveCommands = (dataView: DataView): MessageSizes => {\n  const payloadSizes = new Map<Command, number>();\n  const payloadLen = dataView.getUint8(0);\n  for (let i = 1; i < payloadLen; i += 3) {\n    const commandByte = dataView.getUint8(i);\n    const payloadSize = dataView.getUint16(i + 1);\n    payloadSizes.set(commandByte, payloadSize);\n  }\n  return payloadSizes;\n};\n","import type { WriteStream } from \"fs\";\nimport fs from \"fs\";\nimport { forEach } from \"lodash\";\nimport type { Moment } from \"moment\";\nimport moment from \"moment\";\nimport type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport type { GameStartType, PostFrameUpdateType } from \"../types\";\nimport { Command } from \"../types\";\nimport type { SlpCommandEventPayload } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent, SlpStreamMode } from \"./slpStream\";\n\nconst DEFAULT_NICKNAME = \"unknown\";\n\nexport interface SlpFileMetadata {\n  startTime: Moment;\n  lastFrame: number;\n  players: {\n    [playerIndex: number]: {\n      characterUsage: {\n        [internalCharacterId: number]: number;\n      };\n      names: {\n        netplay: string;\n        code: string;\n      };\n    };\n  };\n  consoleNickname?: string;\n}\n\n/**\n * SlpFile is a class that wraps a Writable stream. It handles the writing of the binary\n * header and footer, and also handles the overwriting of the raw data length.\n *\n * @class SlpFile\n * @extends {Writable}\n */\nexport class SlpFile extends Writable {\n  private filePath: string;\n  private metadata: SlpFileMetadata;\n  private fileStream: WriteStream | null = null;\n  private rawDataLength = 0;\n  private slpStream: SlpStream;\n  private usesExternalStream = false;\n\n  /**\n   * Creates an instance of SlpFile.\n   * @param {string} filePath The file location to write to.\n   * @param {WritableOptions} [opts] Options for writing.\n   * @memberof SlpFile\n   */\n  public constructor(filePath: string, slpStream?: SlpStream, opts?: WritableOptions) {\n    super(opts);\n    this.filePath = filePath;\n    this.metadata = {\n      consoleNickname: DEFAULT_NICKNAME,\n      startTime: moment(),\n      lastFrame: -124,\n      players: {},\n    };\n    this.usesExternalStream = Boolean(slpStream);\n\n    // Create a new SlpStream if one wasn't already provided\n    // This SLP stream represents a single game not multiple, so use manual mode\n    this.slpStream = slpStream ? slpStream : new SlpStream({ mode: SlpStreamMode.MANUAL });\n\n    this._setupListeners();\n    this._initializeNewGame(this.filePath);\n  }\n\n  /**\n   * Get the current file path being written to.\n   *\n   * @returns {string} The location of the current file path\n   * @memberof SlpFile\n   */\n  public path(): string {\n    return this.filePath;\n  }\n\n  /**\n   * Sets the metadata of the Slippi file, such as consoleNickname, lastFrame, and players.\n   * @param metadata The metadata to be written\n   */\n  public setMetadata(metadata: Partial<SlpFileMetadata>): void {\n    this.metadata = Object.assign({}, this.metadata, metadata);\n  }\n\n  public _write(chunk: Uint8Array, encoding: string, callback: (error?: Error | null) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n    // Write it to the file\n    if (this.fileStream) {\n      this.fileStream.write(chunk);\n    }\n\n    // Parse the data manually if it's an internal stream\n    if (!this.usesExternalStream) {\n      this.slpStream.write(chunk);\n    }\n\n    // Keep track of the bytes we've written\n    this.rawDataLength += chunk.length;\n    callback();\n  }\n\n  /**\n   * Here we define what to do on each command. We need to populate the metadata field\n   * so we keep track of the latest frame, as well as the number of frames each character has\n   * been used.\n   *\n   * @param data The parsed data from a SlpStream\n   */\n  private _onCommand(data: SlpCommandEventPayload): void {\n    const { command, payload } = data;\n    switch (command) {\n      case Command.GAME_START:\n        const { players } = payload as GameStartType;\n        forEach(players, (player) => {\n          if (player.type === 3) {\n            return;\n          }\n\n          this.metadata.players[player.playerIndex] = {\n            characterUsage: {},\n            names: {\n              netplay: player.displayName,\n              code: player.connectCode,\n            },\n          };\n        });\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // Here we need to update some metadata fields\n        const { frame, playerIndex, isFollower, internalCharacterId } = payload as PostFrameUpdateType;\n        if (isFollower) {\n          // No need to do this for follower\n          break;\n        }\n\n        // Update frame index\n        this.metadata.lastFrame = frame!;\n\n        // Update character usage\n        const prevPlayer = this.metadata.players[playerIndex!];\n        const characterUsage = prevPlayer!.characterUsage;\n        const curCharFrames = characterUsage[internalCharacterId!] || 0;\n        const player = {\n          ...prevPlayer,\n          characterUsage: {\n            ...characterUsage,\n            [internalCharacterId!]: curCharFrames + 1,\n          },\n        };\n        (this.metadata.players as any)[playerIndex!] = player;\n        break;\n    }\n  }\n\n  private _setupListeners(): void {\n    const streamListener = (data: SlpCommandEventPayload): void => {\n      this._onCommand(data);\n    };\n    this.slpStream.on(SlpStreamEvent.COMMAND, streamListener);\n\n    this.on(\"finish\", () => {\n      // Update file with bytes written\n      const fd = fs.openSync(this.filePath, \"r+\");\n      fs.writeSync(fd, createUInt32Buffer(this.rawDataLength), 0, 4, 11);\n      fs.closeSync(fd);\n\n      // Unsubscribe from the stream\n      this.slpStream.removeListener(SlpStreamEvent.COMMAND, streamListener);\n      // Terminate the internal stream\n      if (!this.usesExternalStream) {\n        this.slpStream.end();\n      }\n    });\n  }\n\n  private _initializeNewGame(filePath: string): void {\n    this.fileStream = fs.createWriteStream(filePath, {\n      encoding: \"binary\",\n    });\n\n    const header = Buffer.concat([\n      Buffer.from(\"{U\"),\n      Buffer.from([3]),\n      Buffer.from(\"raw[$U#l\"),\n      Buffer.from([0, 0, 0, 0]),\n    ]);\n    this.fileStream.write(header);\n  }\n\n  public _final(callback: (error?: Error | null) => void): void {\n    let footer = Buffer.concat([Buffer.from(\"U\"), Buffer.from([8]), Buffer.from(\"metadata{\")]);\n\n    // Write game start time\n    const startTimeStr = this.metadata.startTime.toISOString();\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([7]),\n      Buffer.from(\"startAtSU\"),\n      Buffer.from([startTimeStr.length]),\n      Buffer.from(startTimeStr),\n    ]);\n\n    // Write last frame index\n    // TODO: Get last frame\n    const lastFrame = this.metadata.lastFrame;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([9]),\n      Buffer.from(\"lastFramel\"),\n      createInt32Buffer(lastFrame),\n    ]);\n\n    // write the Console Nickname\n    const consoleNick = this.metadata.consoleNickname || DEFAULT_NICKNAME;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([11]),\n      Buffer.from(\"consoleNickSU\"),\n      Buffer.from([consoleNick.length]),\n      Buffer.from(consoleNick),\n    ]);\n\n    // Start writting player specific data\n    footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([7]), Buffer.from(\"players{\")]);\n    const players = this.metadata.players;\n    forEach(players, (player, index) => {\n      // Start player obj with index being the player index\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([index.length]), Buffer.from(`${index}{`)]);\n\n      // Start characters key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([10]), Buffer.from(\"characters{\")]);\n\n      // Write character usage\n      forEach(player.characterUsage, (usage, internalId) => {\n        // Write this character\n        footer = Buffer.concat([\n          footer,\n          Buffer.from(\"U\"),\n          Buffer.from([internalId.length]),\n          Buffer.from(`${internalId}l`),\n          createUInt32Buffer(usage),\n        ]);\n      });\n\n      // Close characters\n      footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n      // Start names key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([5]), Buffer.from(\"names{\")]);\n\n      // Write display name\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([7]),\n        Buffer.from(\"netplaySU\"),\n        Buffer.from([player.names.netplay.length]),\n        Buffer.from(`${player.names.netplay}`),\n      ]);\n\n      // Write connect code\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([4]),\n        Buffer.from(\"codeSU\"),\n        Buffer.from([player.names.code.length]),\n        Buffer.from(`${player.names.code}`),\n      ]);\n\n      // Close names and player\n      footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n    });\n\n    // Close players\n    footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n    // Write played on\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([8]),\n      Buffer.from(\"playedOnSU\"),\n      Buffer.from([7]),\n      Buffer.from(\"network\"),\n    ]);\n\n    // Close metadata and file\n    footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n\n    // End the stream\n    if (this.fileStream) {\n      this.fileStream.write(footer, callback);\n    }\n  }\n}\n\nconst createInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeInt32BE(number, 0);\n  return buf;\n};\n\nconst createUInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeUInt32BE(number, 0);\n  return buf;\n};\n","import type { Moment } from \"moment\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport type { WritableOptions } from \"stream\";\n\nimport { Command } from \"../types\";\nimport { SlpFile } from \"./slpFile\";\nimport type { SlpRawEventPayload, SlpStreamSettings } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent } from \"./slpStream\";\n\n/**\n * The default function to use for generating new SLP files.\n */\nfunction getNewFilePath(folder: string, m: Moment): string {\n  return path.join(folder, `Game_${m.format(\"YYYYMMDD\")}T${m.format(\"HHmmss\")}.slp`);\n}\n\nexport interface SlpFileWriterOptions extends Partial<SlpStreamSettings> {\n  outputFiles: boolean;\n  folderPath: string;\n  consoleNickname: string;\n  newFilename: (folder: string, startTime: Moment) => string;\n}\n\nconst defaultSettings: SlpFileWriterOptions = {\n  outputFiles: true,\n  folderPath: \".\",\n  consoleNickname: \"unknown\",\n  newFilename: getNewFilePath,\n};\n\nexport enum SlpFileWriterEvent {\n  NEW_FILE = \"new-file\",\n  FILE_COMPLETE = \"file-complete\",\n}\n\n/**\n * SlpFileWriter lets us not only emit events as an SlpStream but also\n * writes the data that is being passed in to an SLP file. Use this if\n * you want to process Slippi data in real time but also want to be able\n * to write out the data to an SLP file.\n *\n * @export\n * @class SlpFileWriter\n * @extends {SlpStream}\n */\nexport class SlpFileWriter extends SlpStream {\n  private currentFile: SlpFile | null = null;\n  private options: SlpFileWriterOptions;\n\n  /**\n   * Creates an instance of SlpFileWriter.\n   */\n  public constructor(options?: Partial<SlpFileWriterOptions>, opts?: WritableOptions) {\n    super(options, opts);\n    this.options = Object.assign({}, defaultSettings, options);\n    this._setupListeners();\n  }\n\n  private _writePayload(payload: Buffer): void {\n    // Write data to the current file\n    if (this.currentFile) {\n      this.currentFile.write(payload);\n    }\n  }\n\n  private _setupListeners(): void {\n    this.on(SlpStreamEvent.RAW, (data: SlpRawEventPayload) => {\n      const { command, payload } = data;\n      switch (command) {\n        case Command.MESSAGE_SIZES:\n          // Create the new game first before writing the payload\n          this._handleNewGame();\n          this._writePayload(payload);\n          break;\n        case Command.GAME_END:\n          // Write payload first before ending the game\n          this._writePayload(payload);\n          this._handleEndGame();\n          break;\n        default:\n          this._writePayload(payload);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Return the name of the SLP file currently being written or null if\n   * no file is being written to currently.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public getCurrentFilename(): string | null {\n    if (this.currentFile !== null) {\n      return path.resolve(this.currentFile.path());\n    }\n    return null;\n  }\n\n  /**\n   * Ends the current file being written to.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public endCurrentFile(): void {\n    this._handleEndGame();\n  }\n\n  /**\n   * Updates the settings to be the desired ones passed in.\n   *\n   * @param {Partial<SlpFileWriterOptions>} settings\n   * @memberof SlpFileWriter\n   */\n  public updateSettings(settings: Partial<SlpFileWriterOptions>): void {\n    this.options = Object.assign({}, this.options, settings);\n  }\n\n  private _handleNewGame(): void {\n    // Only create a new file if we're outputting files\n    if (this.options.outputFiles) {\n      const filePath = this.options.newFilename(this.options.folderPath, moment());\n      this.currentFile = new SlpFile(filePath, this);\n      // console.log(`Creating new file at: ${filePath}`);\n      this.emit(SlpFileWriterEvent.NEW_FILE, filePath);\n    }\n  }\n\n  private _handleEndGame(): void {\n    // End the stream\n    if (this.currentFile) {\n      // Set the console nickname\n      this.currentFile.setMetadata({\n        consoleNickname: this.options.consoleNickname,\n      });\n      this.currentFile.end();\n\n      // console.log(`Finished writing file: ${this.currentFile.path()}`);\n      this.emit(SlpFileWriterEvent.FILE_COMPLETE, this.currentFile.path());\n\n      // Clear current file\n      this.currentFile = null;\n    }\n  }\n}\n","import type { FrameEntryType, RollbackFramesType } from \"../types\";\n\nexport class RollbackCounter {\n  private rollbackFrames: RollbackFramesType = {};\n  private rollbackFrameCount = 0;\n  private rollbackPlayerIdx: number | null = null; // for keeping track of rollbacks by following a single player\n  private lastFrameWasRollback = false;\n  private currentRollbackLength = 0;\n  private rollbackLengths: number[] = [];\n\n  public checkIfRollbackFrame(currentFrame: FrameEntryType | undefined, playerIdx: number) {\n    if (this.rollbackPlayerIdx === null) {\n      // we only want to follow a single player to avoid double counting. So we use whoever is on first.\n      this.rollbackPlayerIdx = playerIdx;\n    } else if (this.rollbackPlayerIdx !== playerIdx) {\n      return;\n    }\n\n    if (currentFrame) {\n      // frame already exists for currentFrameNumber so we must be rolling back\n      if (this.rollbackFrames[currentFrame.frame]) {\n        this.rollbackFrames[currentFrame.frame]!.push(currentFrame);\n      } else {\n        this.rollbackFrames[currentFrame.frame] = [currentFrame];\n      }\n      this.rollbackFrameCount++;\n      this.currentRollbackLength++;\n      this.lastFrameWasRollback = true;\n    } else if (this.lastFrameWasRollback) {\n      this.rollbackLengths.push(this.currentRollbackLength);\n      this.currentRollbackLength = 0;\n      this.lastFrameWasRollback = false;\n    }\n    return this.lastFrameWasRollback;\n  }\n\n  public getFrames() {\n    return this.rollbackFrames;\n  }\n\n  public getCount() {\n    return this.rollbackFrameCount;\n  }\n\n  public getLengths() {\n    return this.rollbackLengths;\n  }\n}\n","import { EventEmitter } from \"events\";\nimport { get, keyBy, set } from \"lodash\";\nimport semver from \"semver\";\n\nimport type {\n  FrameBookendType,\n  FrameEntryType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  ItemUpdateType,\n  PostFrameUpdateType,\n  PreFrameUpdateType,\n  RollbackFrames,\n} from \"../types\";\nimport { Command, Frames, GameMode } from \"../types\";\nimport { RollbackCounter } from \"./rollbackCounter\";\n\nexport const MAX_ROLLBACK_FRAMES = 7;\n\nexport enum SlpParserEvent {\n  SETTINGS = \"settings\",\n  END = \"end\",\n  FRAME = \"frame\", // Emitted for every frame\n  FINALIZED_FRAME = \"finalized-frame\", // Emitted for only finalized frames\n  ROLLBACK_FRAME = \"rollback-frame\", // Emitted if a frame is being replaced\n}\n\n// If strict mode is on, we will do strict validation checking\n// which could throw errors on invalid data.\n// Default to false though since probably only real time applications\n// would care about valid data.\nconst defaultSlpParserOptions = {\n  strict: false,\n};\n\nexport type SlpParserOptions = typeof defaultSlpParserOptions;\n\nexport class SlpParser extends EventEmitter {\n  private frames: FramesType = {};\n  private rollbackCounter: RollbackCounter = new RollbackCounter();\n  private settings: GameStartType | null = null;\n  private gameEnd: GameEndType | null = null;\n  private latestFrameIndex: number | null = null;\n  private settingsComplete = false;\n  private lastFinalizedFrame = Frames.FIRST - 1;\n  private options: SlpParserOptions;\n\n  public constructor(options?: Partial<SlpParserOptions>) {\n    super();\n    this.options = Object.assign({}, defaultSlpParserOptions, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public handleCommand(command: Command, payload: any): void {\n    switch (command) {\n      case Command.GAME_START:\n        this._handleGameStart(payload as GameStartType);\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // We need to handle the post frame update first since that\n        // will finalize the settings object, before we fire the frame update\n        this._handlePostFrameUpdate(payload as PostFrameUpdateType);\n        this._handleFrameUpdate(command, payload as PostFrameUpdateType);\n        break;\n      case Command.PRE_FRAME_UPDATE:\n        this._handleFrameUpdate(command, payload as PreFrameUpdateType);\n        break;\n      case Command.ITEM_UPDATE:\n        this._handleItemUpdate(payload as ItemUpdateType);\n        break;\n      case Command.FRAME_BOOKEND:\n        this._handleFrameBookend(payload as FrameBookendType);\n        break;\n      case Command.GAME_END:\n        this._handleGameEnd(payload as GameEndType);\n        break;\n    }\n  }\n\n  /**\n   * Resets the parser state to their default values.\n   */\n  public reset(): void {\n    this.frames = {};\n    this.settings = null;\n    this.gameEnd = null;\n    this.latestFrameIndex = null;\n    this.settingsComplete = false;\n    this.lastFinalizedFrame = Frames.FIRST - 1;\n  }\n\n  public getLatestFrameNumber(): number {\n    return this.latestFrameIndex ?? Frames.FIRST - 1;\n  }\n\n  public getPlayableFrameCount(): number {\n    if (this.latestFrameIndex === null) {\n      return 0;\n    }\n    return this.latestFrameIndex < Frames.FIRST_PLAYABLE ? 0 : this.latestFrameIndex - Frames.FIRST_PLAYABLE;\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    // return this.playerFrames[this.latestFrameIndex];\n\n    // TODO: Modify this to check if we actually have all the latest frame data and return that\n    // TODO: If we do. For now I'm just going to take a shortcut\n    const allFrames = this.getFrames();\n    const frameIndex = this.latestFrameIndex !== null ? this.latestFrameIndex : Frames.FIRST;\n    const indexToUse = this.gameEnd ? frameIndex : frameIndex - 1;\n    return get(allFrames, indexToUse) || null;\n  }\n\n  public getSettings(): GameStartType | null {\n    return this.settingsComplete ? this.settings : null;\n  }\n\n  public getGameEnd(): GameEndType | null {\n    return this.gameEnd;\n  }\n\n  public getFrames(): FramesType {\n    return this.frames;\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    return {\n      frames: this.rollbackCounter.getFrames(),\n      count: this.rollbackCounter.getCount(),\n      lengths: this.rollbackCounter.getLengths(),\n    };\n  }\n\n  public getFrame(num: number): FrameEntryType | null {\n    return this.frames[num] || null;\n  }\n\n  private _handleGameEnd(payload: GameEndType): void {\n    // Finalize remaining frames if necessary\n    if (this.latestFrameIndex !== null && this.latestFrameIndex !== this.lastFinalizedFrame) {\n      this._finalizeFrames(this.latestFrameIndex);\n    }\n\n    payload = payload as GameEndType;\n    this.gameEnd = payload;\n    this.emit(SlpParserEvent.END, this.gameEnd);\n  }\n\n  private _handleGameStart(payload: GameStartType): void {\n    this.settings = payload;\n    const players = payload.players;\n    this.settings.players = players.filter((player) => player.type !== 3);\n\n    // Check to see if the file was created after the sheik fix so we know\n    // we don't have to process the first frame of the game for the full settings\n    if (payload.slpVersion && semver.gte(payload.slpVersion, \"1.6.0\")) {\n      this._completeSettings();\n    }\n  }\n\n  private _handlePostFrameUpdate(payload: PostFrameUpdateType): void {\n    if (this.settingsComplete) {\n      return;\n    }\n\n    // Finish calculating settings\n    if (payload.frame! <= Frames.FIRST) {\n      const playerIndex = payload.playerIndex!;\n      const playersByIndex = keyBy(this.settings!.players, \"playerIndex\");\n\n      switch (payload.internalCharacterId) {\n        case 0x7:\n          playersByIndex[playerIndex]!.characterId = 0x13; // Sheik\n          break;\n        case 0x13:\n          playersByIndex[playerIndex]!.characterId = 0x12; // Zelda\n          break;\n      }\n    }\n    if (payload.frame! > Frames.FIRST) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameUpdate(command: Command, payload: PreFrameUpdateType | PostFrameUpdateType): void {\n    payload = payload as PostFrameUpdateType;\n    const location = command === Command.PRE_FRAME_UPDATE ? \"pre\" : \"post\";\n    const field = payload.isFollower ? \"followers\" : \"players\";\n    const currentFrameNumber = payload.frame!;\n    this.latestFrameIndex = currentFrameNumber;\n    if (location === \"pre\" && !payload.isFollower) {\n      const currentFrame = this.frames[currentFrameNumber];\n      const wasRolledback = this.rollbackCounter.checkIfRollbackFrame(currentFrame, payload.playerIndex!);\n      if (wasRolledback) {\n        // frame is about to be overwritten\n        this.emit(SlpParserEvent.ROLLBACK_FRAME, currentFrame);\n      }\n    }\n    set(this.frames, [currentFrameNumber, field, payload.playerIndex!, location], payload);\n    set(this.frames, [currentFrameNumber, \"frame\"], currentFrameNumber);\n\n    // If file is from before frame bookending, add frame to stats computer here. Does a little\n    // more processing than necessary, but it works\n    const settings = this.getSettings();\n    if (settings && (!settings.slpVersion || semver.lte(settings.slpVersion, \"2.2.0\"))) {\n      this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n      // Finalize the previous frame since no bookending exists\n      this._finalizeFrames(currentFrameNumber - 1);\n    } else {\n      set(this.frames, [currentFrameNumber, \"isTransferComplete\"], false);\n    }\n  }\n\n  private _handleItemUpdate(payload: ItemUpdateType): void {\n    const currentFrameNumber = payload.frame!;\n    const items = this.frames[currentFrameNumber]?.items ?? [];\n    items.push(payload);\n\n    // Set items with newest\n    set(this.frames, [currentFrameNumber, \"items\"], items);\n  }\n\n  private _handleFrameBookend(payload: FrameBookendType): void {\n    const latestFinalizedFrame = payload.latestFinalizedFrame!;\n    const currentFrameNumber = payload.frame!;\n    set(this.frames, [currentFrameNumber, \"isTransferComplete\"], true);\n    // Fire off a normal frame event\n    this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n\n    // Finalize frames if necessary\n    const validLatestFrame = this.settings!.gameMode === GameMode.ONLINE;\n    if (validLatestFrame && latestFinalizedFrame >= Frames.FIRST) {\n      // Ensure valid latestFinalizedFrame\n      if (this.options.strict && latestFinalizedFrame < currentFrameNumber - MAX_ROLLBACK_FRAMES) {\n        throw new Error(`latestFinalizedFrame should be within ${MAX_ROLLBACK_FRAMES} frames of ${currentFrameNumber}`);\n      }\n      this._finalizeFrames(latestFinalizedFrame);\n    } else {\n      // Since we don't have a valid finalized frame, just finalize the frame based on MAX_ROLLBACK_FRAMES\n      this._finalizeFrames(currentFrameNumber - MAX_ROLLBACK_FRAMES);\n    }\n  }\n\n  /**\n   * Fires off the FINALIZED_FRAME event for frames up until a certain number\n   * @param num The frame to finalize until\n   */\n  private _finalizeFrames(num: number): void {\n    while (this.lastFinalizedFrame < num) {\n      const frameToFinalize = this.lastFinalizedFrame + 1;\n      const frame = this.getFrame(frameToFinalize)!;\n\n      // Check that we have all the pre and post frame data for all players if we're in strict mode\n      if (this.options.strict) {\n        for (const player of this.settings!.players) {\n          const playerFrameInfo = frame.players[player.playerIndex];\n          // Allow player frame info to be empty in non 1v1 games since\n          // players which have been defeated will have no frame info.\n          if (this.settings!.players.length > 2 && !playerFrameInfo) {\n            continue;\n          }\n\n          const { pre, post } = playerFrameInfo!;\n          if (!pre || !post) {\n            const preOrPost = pre ? \"pre\" : \"post\";\n            throw new Error(\n              `Could not finalize frame ${frameToFinalize} of ${num}: missing ${preOrPost}-frame update for player ${player.playerIndex}`,\n            );\n          }\n        }\n      }\n\n      // Our frame is complete so finalize the frame\n      this.emit(SlpParserEvent.FINALIZED_FRAME, frame);\n      this.lastFinalizedFrame = frameToFinalize;\n    }\n  }\n\n  private _completeSettings(): void {\n    if (!this.settingsComplete) {\n      this.settingsComplete = true;\n      this.emit(SlpParserEvent.SETTINGS, this.settings);\n    }\n  }\n}\n","import type { StatOptions, StatsType } from \"./stats\";\nimport {\n  ActionsComputer,\n  ComboComputer,\n  ConversionComputer,\n  generateOverallStats,\n  InputComputer,\n  Stats,\n  StockComputer,\n} from \"./stats\";\n// Type imports\nimport type { FrameEntryType, FramesType, GameEndType, GameStartType, MetadataType, RollbackFrames } from \"./types\";\nimport { SlpParser, SlpParserEvent } from \"./utils/slpParser\";\nimport type { SlpReadInput } from \"./utils/slpReader\";\nimport { closeSlpFile, getMetadata, iterateEvents, openSlpFile, SlpInputSource } from \"./utils/slpReader\";\n\n/**\n * Slippi Game class that wraps a file\n */\nexport class SlippiGame {\n  private input: SlpReadInput;\n  private metadata: MetadataType | null = null;\n  private finalStats: StatsType | null = null;\n  private parser: SlpParser;\n  private readPosition: number | null = null;\n  private actionsComputer: ActionsComputer = new ActionsComputer();\n  private conversionComputer: ConversionComputer = new ConversionComputer();\n  private comboComputer: ComboComputer = new ComboComputer();\n  private stockComputer: StockComputer = new StockComputer();\n  private inputComputer: InputComputer = new InputComputer();\n  protected statsComputer: Stats;\n\n  public constructor(input: string | Buffer | ArrayBuffer, opts?: StatOptions) {\n    if (typeof input === \"string\") {\n      this.input = {\n        source: SlpInputSource.FILE,\n        filePath: input,\n      };\n    } else if (input instanceof Buffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: input,\n      };\n    } else if (input instanceof ArrayBuffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: Buffer.from(input),\n      };\n    } else {\n      throw new Error(\"Cannot create SlippiGame with input of that type\");\n    }\n\n    // Set up stats calculation\n    this.statsComputer = new Stats(opts);\n    this.statsComputer.register(\n      this.actionsComputer,\n      this.comboComputer,\n      this.conversionComputer,\n      this.inputComputer,\n      this.stockComputer,\n    );\n    this.parser = new SlpParser();\n    this.parser.on(SlpParserEvent.SETTINGS, (settings) => {\n      this.statsComputer.setup(settings);\n    });\n    // Use finalized frames for stats computation\n    this.parser.on(SlpParserEvent.FINALIZED_FRAME, (frame: FrameEntryType) => {\n      this.statsComputer.addFrame(frame);\n    });\n  }\n\n  private _process(settingsOnly = false): void {\n    if (this.parser.getGameEnd() !== null) {\n      return;\n    }\n    const slpfile = openSlpFile(this.input);\n    // Generate settings from iterating through file\n    this.readPosition = iterateEvents(\n      slpfile,\n      (command, payload) => {\n        if (!payload) {\n          // If payload is falsy, keep iterating. The parser probably just doesn't know\n          // about this command yet\n          return false;\n        }\n        this.parser.handleCommand(command, payload);\n        return settingsOnly && this.parser.getSettings() !== null;\n      },\n      this.readPosition,\n    );\n    closeSlpFile(slpfile);\n  }\n\n  /**\n   * Gets the game settings, these are the settings that describe the starting state of\n   * the game such as characters, stage, etc.\n   */\n  public getSettings(): GameStartType | null {\n    // Settings is only complete after post-frame update\n    this._process(true);\n    return this.parser.getSettings();\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    this._process();\n    return this.parser.getLatestFrame();\n  }\n\n  public getGameEnd(): GameEndType | null {\n    this._process();\n    return this.parser.getGameEnd();\n  }\n\n  public getFrames(): FramesType {\n    this._process();\n    return this.parser.getFrames();\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    this._process();\n    return this.parser.getRollbackFrames();\n  }\n\n  public getStats(): StatsType | null {\n    if (this.finalStats) {\n      return this.finalStats;\n    }\n\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (settings === null) {\n      return null;\n    }\n\n    // Finish processing if we're not up to date\n    this.statsComputer.process();\n    const inputs = this.inputComputer.fetch();\n    const stocks = this.stockComputer.fetch();\n    const conversions = this.conversionComputer.fetch();\n    const playableFrameCount = this.parser.getPlayableFrameCount();\n    const overall = generateOverallStats({ settings, inputs, conversions, playableFrameCount });\n\n    const stats = {\n      lastFrame: this.parser.getLatestFrameNumber(),\n      playableFrameCount,\n      stocks: stocks,\n      conversions: conversions,\n      combos: this.comboComputer.fetch(),\n      actionCounts: this.actionsComputer.fetch(),\n      overall: overall,\n      gameComplete: this.parser.getGameEnd() !== null,\n    };\n\n    if (this.parser.getGameEnd() !== null) {\n      // If the game is complete, store a cached version of stats because it should not\n      // change anymore. Ideally the statsCompuer.process and fetch functions would simply do no\n      // work in this case instead but currently the conversions fetch function,\n      // generateOverallStats, and maybe more are doing work on every call.\n      this.finalStats = stats;\n    }\n\n    return stats;\n  }\n\n  public getMetadata(): MetadataType | null {\n    if (this.metadata) {\n      return this.metadata;\n    }\n    const slpfile = openSlpFile(this.input);\n    this.metadata = getMetadata(slpfile);\n    closeSlpFile(slpfile);\n    return this.metadata;\n  }\n\n  public getFilePath(): string | null {\n    if (this.input.source !== SlpInputSource.FILE) {\n      return null;\n    }\n\n    return this.input.filePath ?? null;\n  }\n}\n"],"names":["getDeathDirection","actionStateId","Character","Stage","DEFAULT_COLOR","UnknownCharacter","id","name","shortName","colors","externalCharacters","CAPTAIN_FALCON","DONKEY_KONG","FOX","GAME_AND_WATCH","KIRBY","BOWSER","LINK","LUIGI","MARIO","MARTH","MEWTWO","NESS","PEACH","PIKACHU","ICE_CLIMBERS","JIGGLYPUFF","SAMUS","YOSHI","ZELDA","SHEIK","FALCO","YOUNG_LINK","DR_MARIO","ROY","PICHU","GANONDORF","getAllCharacters","getCharacterInfo","externalCharacterId","charInfo","getCharacterShortName","character","getCharacterName","getCharacterColorName","characterColor","color","UnknownMove","moves","getMoveInfo","moveId","m","getMoveShortName","move","getMoveName","UnknownStage","stages","FOUNTAIN_OF_DREAMS","POKEMON_STADIUM","PEACHS_CASTLE","KONGO_JUNGLE","BRINSTAR","CORNERIA","YOSHIS_STORY","ONETT","MUTE_CITY","RAINBOW_CRUISE","JUNGLE_JAPES","GREAT_BAY","HYRULE_TEMPLE","BRINSTAR_DEPTHS","YOSHIS_ISLAND","GREEN_GREENS","FOURSIDE","MUSHROOM_KINGDOM","MUSHROOM_KINGDOM_2","VENOM","POKE_FLOATS","BIG_BLUE","ICICLE_MOUNTAIN","ICETOP","FLAT_ZONE","DREAMLAND","YOSHIS_ISLAND_N64","KONGO_JUNGLE_N64","BATTLEFIELD","FINAL_DESTINATION","TARGET_TEST_MARIO","TARGET_TEST_CAPTAIN_FALCON","TARGET_TEST_YOUNG_LINK","TARGET_TEST_DONKEY_KONG","TARGET_TEST_DR_MARIO","TARGET_TEST_FALCO","TARGET_TEST_FOX","TARGET_TEST_ICE_CLIMBERS","TARGET_TEST_KIRBY","TARGET_TEST_BOWSER","TARGET_TEST_LINK","TARGET_TEST_LUIGI","TARGET_TEST_MARTH","TARGET_TEST_MEWTWO","TARGET_TEST_NESS","TARGET_TEST_PEACH","TARGET_TEST_PICHU","TARGET_TEST_PIKACHU","TARGET_TEST_JIGGLYPUFF","TARGET_TEST_SAMUS","TARGET_TEST_SHEIK","TARGET_TEST_YOSHI","TARGET_TEST_ZELDA","TARGET_TEST_GAME_AND_WATCH","TARGET_TEST_ROY","TARGET_TEST_GANONDORF","HOME_RUN_CONTEST","getStageInfo","stageId","s","getStageName","stage","State","Timers","PUNISH_RESET_FRAMES","RECOVERY_RESET_FRAMES","COMBO_STRING_RESET_FRAMES","getSinglesPlayerPermutationsFromSettings","settings","players","length","playerIndex","opponentIndex","didLoseStock","frame","prevFrame","stocksRemaining","isInControl","state","ground","GROUNDED_CONTROL_START","GROUNDED_CONTROL_END","squat","SQUAT_START","SQUAT_END","groundAttack","GROUND_ATTACK_START","GROUND_ATTACK_END","isGrab","GRAB","isTeching","TECH_START","TECH_END","isDown","DOWN_START","DOWN_END","isDamaged","DAMAGE_START","DAMAGE_END","DAMAGE_FALL","isGrabbed","CAPTURE_START","CAPTURE_END","isCommandGrabbed","COMMAND_GRAB_RANGE1_START","COMMAND_GRAB_RANGE1_END","COMMAND_GRAB_RANGE2_START","COMMAND_GRAB_RANGE2_END","BARREL_WAIT","isDead","DYING_START","DYING_END","calcDamageTaken","percent","prevPercent","dashDanceAnimations","DASH","TURN","ActionsComputer","playerPermutations","Array","Map","setup","forEach","indices","playerCounts","wavedashCount","wavelandCount","airDodgeCount","dashDanceCount","spotDodgeCount","ledgegrabCount","rollCount","lCancelCount","success","fail","grabCount","throwCount","up","forward","back","down","groundTechCount","away","in","neutral","wallTechCount","playerState","animations","set","processFrame","get","handleActionCompute","fetch","from","values","map","val","didMissGroundTech","animation","TECH_MISS_DOWN","TECH_MISS_UP","isRolling","ROLL_BACKWARD","ROLL_FORWARD","didStartRoll","currentAnimation","previousAnimation","isCurrentlyRolling","wasPreviouslyRolling","isSpotDodging","SPOT_DODGE","didStartGrabSuccess","GRAB_WAIT","didStartGrabFail","didStartSpotDodge","isCurrentlyDodging","wasPreviouslyDodging","isAirDodging","AIR_DODGE","didStartAirDodge","isGrabbingLedge","CLIFF_CATCH","isAerialAttack","AERIAL_ATTACK_START","AERIAL_ATTACK_END","didStartLedgegrab","isCurrentlyGrabbingLedge","wasPreviouslyGrabbingLedge","playerFrame","post","opponentFrame","incrementCount","field","condition","current","push","last3Frames","slice","prevAnimation","newAnimation","didDashDance","isEqual","didRoll","didSpotDodge","didAirDodge","didGrabLedge","didGrabSucceed","didGrabFail","THROW_UP","THROW_FORWARD","THROW_DOWN","THROW_BACK","didMissTech","opponentDir","facingOpponent","positionX","facingDirection","FORWARD_TECH","BACKWARD_TECH","NEUTRAL_TECH","WALL_TECH","MISSED_WALL_TECH","lCancelStatus","handleActionWavedash","counts","last","isSpecialLanding","LANDING_FALL_SPECIAL","isAcceptablePrevious","isWavedashInitiationAnimation","isPossibleWavedash","recentFrames","recentAnimations","keyBy","size","ACTION_KNEE_BEND","isAboveMin","CONTROLLED_JUMP_START","isBelowMax","CONTROLLED_JUMP_END","ComboEvent","ComboComputer","EventEmitter","combos","combo","resetCounter","lastHitAnimation","event","allFrames","handleComboCompute","emit","frames","currentFrameNumber","prevFrameNumber","prevPlayerFrame","prevOpponentFrame","oppActionStateId","opntIsDamaged","opntIsGrabbed","opntIsCommandGrabbed","opntDamageTaken","actionChangedSinceHit","actionCounter","actionStateCounter","prevActionCounter","actionFrameCounterReset","comboStarted","startFrame","endFrame","startPercent","currentPercent","endPercent","didKill","lastHitBy","lastAttackLanded","hitCount","damage","COMBO_EXTEND","COMBO_START","opntIsTeching","opntIsDowned","opntDidLoseStock","opntIsDying","shouldTerminate","COMBO_END","ConversionComputer","constructor","conversions","metadata","lastEndFrameByOppIdx","conversion","terminated","handleConversionCompute","_populateConversionTypes","conversionsToHandle","filter","openingType","groupedConversions","groupBy","sortedConversions","orderBy","isTrade","lastMove","oppEndFrame","isCounterAttack","opntInControl","shouldStartResetCounter","shouldContinueResetCounter","Command","GameMode","Frames","JoystickRegion","InputComputer","inputCount","joystickInputCount","cstickInputCount","buttonInputCount","triggerInputCount","handleInputCompute","pre","FIRST_PLAYABLE","invertedPreviousButtons","physicalButtons","currentButtons","buttonChanges","newInputsPressed","countSetBits","prevAnalogRegion","getJoystickRegion","joystickX","joystickY","currentAnalogRegion","DZ","prevCstickRegion","cStickX","cStickY","currentCstickRegion","physicalLTrigger","physicalRTrigger","x","bits","count","y","region","NE","SE","SW","NW","N","E","S","W","generateOverallStats","inputs","playableFrameCount","inputsByPlayer","originalConversions","conversionsByPlayer","conv","conversionsByPlayerByOpening","mapValues","gameMinutes","overall","player","playerInputs","inputCounts","buttons","triggers","cstick","joystick","total","conversionCount","successfulConversionCount","opponentIndices","opp","isTeams","teamId","totalDamage","killCount","successfulConversions","getRatio","inputsPerMinute","digitalInputsPerMinute","openingsPerKill","damagePerOpening","neutralWinRatio","getOpeningRatio","counterHitRatio","beneficialTradeRatio","getBeneficialTradeRatio","ratio","type","openings","opponentOpenings","flatten","playerTrades","opponentTrades","benefitsPlayer","zippedTrades","zip","conversionPair","playerConversion","first","opponentConversion","playerDamage","opponentDamage","defaultOptions","processOnTheFly","Stats","options","lastProcessedFrame","allComputers","Object","assign","v","comp","register","computer","process","i","FIRST","isCompletedFrame","addFrame","playerPostFrame","StockComputer","stocks","stock","handleStockCompute","isPlayerDead","deathAnimation","CommunicationType","ConsoleCommunication","receiveBuf","Buffer","messages","receive","data","concat","msgSize","readUInt32BE","ubjsonData","decode","getReceiveBuffer","getMessages","toReturn","genHandshakeOut","cursor","clientToken","isRealtime","clientTokenBuf","writeUInt32BE","message","HANDSHAKE","payload","Uint8Array","buf","encode","optimizeArrays","msg","byteLength","ConnectionEvent","ConnectionStatus","Ports","NETWORK_MESSAGE","DEFAULT_CONNECTION_TIMEOUT_MS","CommunicationState","defaultConnectionDetails","consoleNick","gameDataCursor","version","consoleConnectionOptions","autoReconnect","ConsoleConnection","ipAddress","port","connectionStatus","DISCONNECTED","connDetails","client","connection","shouldReconnect","DEFAULT","getStatus","getSettings","getDetails","connect","ip","timeout","_connectOnPort","reconnect","inject","net","host","_setStatus","CONNECTING","consoleComms","initialDelay","maxDelay","strategy","failAfter","Infinity","CONNECT","commState","INITIAL","on","_getInitialCommState","console","log","CONNECTED","toString","LEGACY","_handleReplayData","err","error","prevDataBuf","rcvData","destroy","ERROR","_processMessage","warn","handshakeMsgOut","write","setConnectingStatus","RECONNECT_WAIT","disconnect","openingBytes","dataStart","equals","NORMAL","MESSAGE","KEEP_ALIVE","fakeKeepAlive","REPLAY","readPos","pos","cmp","compare","forcePos","Error","nextPos","nick","nintendontVersion","tokenBuf","DATA","status","STATUS_CHANGE","MAX_PEERS","DolphinMessageType","DolphinConnection","gameCursor","nickname","peer","enet","createClient","peers","channels","address","newPeer","ping","request","packet","Packet","JSON","stringify","PACKET_FLAG","RELIABLE","send","dataString","parse","dolphin_closed","CONNECT_REPLY","GAME_EVENT","_updateCursor","gameData","START_GAME","END_GAME","next_cursor","toHalfwidth","str","convertChar","charCode","ret","char","charCodeAt","String","fromCharCode","SlpInputSource","getRef","input","source","FILE","filePath","fd","fs","openSync","fileDescriptor","BUFFER","buffer","readRef","ref","offset","position","readSync","copy","getLenRef","fileStats","fstatSync","openSlpFile","rawDataPosition","getRawDataPosition","rawDataLength","getRawDataLength","metadataPosition","metadataLength","getMetadataLength","messageSizes","getMessageSizes","closeSlpFile","file","closeSync","fileSize","rawDataLen","len","MESSAGE_SIZES","payloadLength","messageSizesBuffer","command","iterateEvents","slpFile","callback","startPos","readPosition","stopReadingAt","commandPayloadBuffers","commandByteBuffer","commandByte","undefined","parsedPayload","parseMessage","shouldStop","view","DataView","GAME_START","getPlayerObject","cfOffset","dashback","readUint32","shieldDrop","cfOption","nametagLength","nametagOffset","nametagStart","nametagBuf","nameTagString","iconv","split","shift","nametag","displayNameLength","displayNameOffset","displayNameStart","displayNameBuf","displayNameString","displayName","connectCodeLength","connectCodeOffset","connectCodeStart","connectCodeBuf","connectCodeString","connectCode","characterId","readUint8","startStocks","controllerFix","slpVersion","readBool","isPAL","readUint16","scene","gameMode","PRE_FRAME_UPDATE","readInt32","isFollower","seed","readFloat","positionY","trigger","POST_FRAME_UPDATE","selfInducedSpeeds","airX","attackX","attackY","groundX","internalCharacterId","shieldSize","currentComboCount","miscActionState","isAirborne","lastGroundId","jumpsRemaining","hurtboxCollisionState","ITEM_UPDATE","typeId","velocityX","velocityY","damageTaken","expirationTimer","spawnId","missileType","turnipFace","chargeShotLaunched","chargePower","owner","readInt8","FRAME_BOOKEND","latestFinalizedFrame","GAME_END","gameEndMethod","lrasInitiatorIndex","canReadFromView","viewLength","getFloat32","getInt32","getInt8","getUint32","getUint16","getUint8","getMetadata","ex","SlpStreamMode","defaultSettings","suppressErrors","mode","AUTO","SlpStreamEvent","SlpStream","Writable","slpOptions","opts","gameEnded","payloadSizes","previousBuffer","restart","_write","newData","encoding","dataView","index","payloadSize","remainingLen","MANUAL","payloadPtr","payloadDataView","payloadLen","_processCommand","_writeCommand","entirePayload","payloadBuf","bufToWrite","RAW","processReceiveCommands","COMMAND","DEFAULT_NICKNAME","SlpFile","slpStream","fileStream","usesExternalStream","consoleNickname","startTime","moment","lastFrame","Boolean","_setupListeners","_initializeNewGame","path","setMetadata","chunk","_onCommand","characterUsage","names","netplay","code","prevPlayer","curCharFrames","streamListener","writeSync","createUInt32Buffer","removeListener","end","createWriteStream","header","_final","footer","startTimeStr","toISOString","createInt32Buffer","usage","internalId","number","alloc","writeInt32BE","getNewFilePath","folder","join","format","outputFiles","folderPath","newFilename","SlpFileWriterEvent","SlpFileWriter","currentFile","_writePayload","_handleNewGame","_handleEndGame","getCurrentFilename","resolve","endCurrentFile","updateSettings","NEW_FILE","FILE_COMPLETE","RollbackCounter","rollbackFrames","rollbackFrameCount","rollbackPlayerIdx","lastFrameWasRollback","currentRollbackLength","rollbackLengths","checkIfRollbackFrame","currentFrame","playerIdx","getFrames","getCount","getLengths","MAX_ROLLBACK_FRAMES","SlpParserEvent","defaultSlpParserOptions","strict","SlpParser","rollbackCounter","gameEnd","latestFrameIndex","settingsComplete","lastFinalizedFrame","handleCommand","_handleGameStart","_handlePostFrameUpdate","_handleFrameUpdate","_handleItemUpdate","_handleFrameBookend","_handleGameEnd","reset","getLatestFrameNumber","getPlayableFrameCount","getLatestFrame","frameIndex","indexToUse","getGameEnd","getRollbackFrames","lengths","getFrame","num","_finalizeFrames","END","semver","gte","_completeSettings","playersByIndex","location","wasRolledback","ROLLBACK_FRAME","lte","FRAME","items","validLatestFrame","ONLINE","frameToFinalize","playerFrameInfo","preOrPost","FINALIZED_FRAME","SETTINGS","SlippiGame","finalStats","parser","actionsComputer","conversionComputer","comboComputer","stockComputer","inputComputer","statsComputer","ArrayBuffer","_process","settingsOnly","slpfile","getStats","stats","actionCounts","gameComplete","getFilePath"],"mappings":"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"}